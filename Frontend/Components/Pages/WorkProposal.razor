@page "/WorkProposal"

@using System.Text.Json
@using Frontend.Helpers

@rendermode InteractiveServer

@inject HttpClient Http
@inject ApiHelper ApiHelper
@inject IJSRuntime JSRuntime

<h2 class="titles">Work Proposals</h2>
<!-- Linha separadora -->
<hr class="separator" />

<div>
    <h4 class="titles">All Work Proposals</h4>
    @if (_workProposals is null)
    {
        <p>Loading proposals...</p>
    }
    else if (_workProposals.Count == 0)
    {
        <p>No proposals found.</p>
    }
    else
    {
        <table class="wptable">
            <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Skills</th>
                <th>Experience</th>
                <th>Description</th>
                <th>Hours</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var proposal in _workProposals)
            {
                int currentId = ((JsonElement)proposal["proposal_id"]).GetInt32();
                bool isEditingRow = currentId == _editingRowId;

                <tr>
                    @if (isEditingRow)
                    {
                        <td><input @bind="_editingProposal.proposal_name" /></td>
                        <td><input @bind="_editingProposal.category" /></td>
                        <td><input @bind="_editingProposal.necessary_skills" /></td>
                        <td><input @bind="_editingProposal.years_of_experience" /></td>
                        <td><input @bind="_editingProposal.description" /></td>
                        <td><input @bind="_editingProposal.total_hours" /></td>
                        <td>
                            <button class="btn btn-success" @onclick="UpdateProposal">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </td>
                    }
                    else
                    {
                        <td>@proposal["proposal_name"]</td>
                        <td>@proposal["category"]</td>
                        <td>@proposal["necessary_skills"]</td>
                        <td>@proposal["years_of_experience"]</td>
                        <td>@proposal["description"]</td>
                        <td>@proposal["total_hours"]</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => EditProposal(proposal)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProposal(proposal)">Delete</button>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    }
</div>

<!-- Linha separadora -->
<hr class="separator" />

<div class="outlined-section">
    <h4>Create Work Proposal</h4>
    
    @if (!string.IsNullOrEmpty(_message))
    {
        <p style="color: green;">@_message</p>
    }
    
    <EditForm Model="_proposal" OnValidSubmit="SubmitProposal" FormName="WorkProposalForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div>
            <label>Proposal Name:</label>
            <InputText @bind-Value="_proposal.proposal_name"  class="form-control" required/>
        </div>

        <div>
            <label>Category:</label>
            <InputText @bind-Value="_proposal.category" class="form-control"  required/>
        </div>

        <div>
            <label>Necessary Skills:</label>
            <InputText @bind-Value="_proposal.necessary_skills" class="form-control"  required/>
        </div>

        <div>
            <label>Years of Experience:</label>
            <InputText @bind-Value="_proposal.years_of_experience" class="form-control"  required/>
        </div>

        <div>
            <label>Description:</label>
            <InputTextArea @bind-Value="_proposal.description" class="form-control"  required/>
        </div>

        <div>
            <label>Total Hours:</label>
            <InputText @bind-Value="_proposal.total_hours" class="form-control"  required/>
        </div>

        <div>
            <label>User ID:</label>
            <InputNumber @bind-Value="_proposal.fk_user_id" class="form-control"  required/>
        </div>

        <button class="btn btn-primary" type="submit">Criar</button>
    </EditForm>
</div>

@code {
    private WorkProposalModel _proposal = new();
    private List<Dictionary<string, object>> _workProposals = new();
    private string _message = string.Empty;
    private int _editingRowId = -1;
    private WorkProposalModel _editingProposal = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProposals();
    }

    private async Task LoadProposals()
    {
        try
        {
            // Usando o ApiHelper para buscar os dados, sem a necessidade de um modelo
            _workProposals = await ApiHelper.GetFromApiAsync<List<Dictionary<string, object>>>("/work_proposals");
        }
        catch (Exception ex)
        {
            _message = "Error loading proposals.";
        }
    }

    private async Task SubmitProposal()
    {
        if (string.IsNullOrWhiteSpace(_proposal.proposal_name))
        {
            throw new NotSupportedException("HELP!");
        }
        try
        {
            var response = await ApiHelper.PostToApiAsync<WorkProposalModel, WorkProposalModel>("/work_proposals", _proposal);

            if (response != null)
            {
                _message = "Proposal created successfully!";
                _proposal = new(); // Reset form
                await LoadProposals(); // Refresh table
            }
            else
            {
                _message = "Failed to create proposal.";
            }
        }
        catch (Exception ex)
        {
            _message = $"Error creating proposal: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");
            }
        }
    }

    private class WorkProposalModel
    {
        public int proposal_id { get; set; }
        public string proposal_name { get; set; } = string.Empty;
        public string category { get; set; } = string.Empty;
        public string necessary_skills { get; set; } = string.Empty;
        public string years_of_experience { get; set; } = string.Empty;
        public string description { get; set; } = string.Empty;
        public string total_hours { get; set; } = string.Empty;
        public int fk_user_id { get; set; }
    }
    
    private void EditProposal(Dictionary<string, object> proposal)
    {
        _editingRowId = ((JsonElement)proposal["proposal_id"]).GetInt32();
        _editingProposal = new WorkProposalModel
        {
            proposal_id = _editingRowId,  // Certifica-te de que este ID está correto
            proposal_name = proposal["proposal_name"].ToString() ?? "",
            category = proposal["category"].ToString() ?? "",
            necessary_skills = proposal["necessary_skills"].ToString() ?? "",
            years_of_experience = proposal["years_of_experience"].ToString() ?? "",
            description = proposal["description"].ToString() ?? "",
            total_hours = proposal["total_hours"].ToString() ?? "",
            fk_user_id = proposal.TryGetValue("fk_user_id", out var fkUser) ? ((JsonElement)fkUser).GetInt32() : 0
        };
    }

    private async Task UpdateProposal()
    {
        try
        {
            // Certifica-te de que estás a usar o PUT, que é o método de atualização
            var response = await ApiHelper.PutToApiAsync<WorkProposalModel, WorkProposalModel>(
                $"/work_proposals/{_editingProposal.proposal_id}", _editingProposal);

            if (response != null)
            {
                _message = "Proposal updated successfully!";
                _editingRowId = -1;
                _editingProposal = new();
                await LoadProposals();  // Recarregar as propostas após atualização
            }
            else
            {
                _message = "Failed to update proposal.";
            }
        }
        catch (Exception ex)
        {
            _message = $"Error updating proposal: {ex.Message}";
        }
    }
    private void CancelEdit()
    {
        _editingRowId = -1;
        _editingProposal = new();
    }
    
    private async Task DeleteProposal(Dictionary<string, object> proposal)
    {
        try
        {
            if (proposal.TryGetValue("proposal_id", out var idObj) && idObj is not null)
            {
                int id = ((JsonElement)idObj).GetInt32();
                var success = await ApiHelper.DeleteFromApiAsync($"/work_proposals/{id}");

                if (success)
                {
                    _message = "Proposal deleted successfully.";
                    await LoadProposals(); // Atualiza a lista
                }
                else
                {
                    _message = "Failed to delete proposal.";
                }
            }
            else
            {
                _message = "Invalid proposal ID.";
            }
        }
        catch (Exception ex)
        {
            _message = $"Error deleting proposal: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}


<style>
    .titles {
        margin-left: 10px;
    }
    .wptable {
        max-width: 1200px;
        width: 100%;
        margin-left: auto;
        margin-right: auto;
    }

    hr.separator {
        border: 0;
        height: 2px;
        background-color: #ccc;
        margin: 30px 0;
    }
    
    table {
        width: 100%;
        border-collapse: collapse;
        background-color: #f0f0f0;
    }

    th, td {
        padding: 12px;
        text-align: left;
        border: 1px solid #ccc;
    }

    th {
        background-color: #d3d3d3;
        font-weight: bold;
    }

    tr:nth-child(even) {
        background-color: #e0e0e0;
    }

    tr:hover {
        background-color: #d1d1d1;
    }
    
    .outlined-section {
        border: 2px solid #ccc;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
        max-width: 600px;
        width: 100%;
        margin: 20px;
    }

    label {
        font-size: 14px;
        font-weight: bold;
        color: #333;
        display: block;
        margin-bottom: 8px;
    }

    input[type="text"], input[type="number"], textarea {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
        margin-bottom: 15px;
        font-size: 14px;
        background-color: #fff;
        box-sizing: border-box;
    }

    button {
        padding: 10px 20px;
        background-color: #f4442e;
        color: #fff;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #e33a24;
    }

    /* Estilo para o texto de sucesso */
    .message {
        color: green;
        font-weight: bold;
        margin-bottom: 15px;
    }
    
    textarea {
        resize: vertical;
    }
</style>
