@page "/work-proposal"

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Frontend.Helpers

@rendermode InteractiveServer

@inject ApiHelper ApiHelper
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<h2 class="titles">Work Proposals</h2>

@if (_loadingUser)
{
    <p>Loading user info...</p>
}
else if (string.IsNullOrEmpty(_username))
{
    <p style="color: red;">User not authenticated. Redirecting to login...</p>
}

<div class="form-wrapper">
    <div class="form-container">
        <h4>Create Work Proposal</h4>

        @if (!string.IsNullOrEmpty(_formMessage))
        {
            <p style="color:@_formMessageColor;">@_formMessage</p>
        }

        <EditForm Model="_proposal" OnValidSubmit="SubmitProposal">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label>Proposal Name:</label>
                <InputText @bind-Value="_proposal.proposal_name" class="form-control" required />
            </div>

            <div>
                <label>Category:</label>
                <InputText @bind-Value="_proposal.category" class="form-control" required />
            </div>

            <div>
                <label>Necessary Skills:</label>
                <InputText @bind-Value="_proposal.necessary_skills" class="form-control" required />
            </div>

            <div>
                <label>Years of Experience:</label>
                <InputNumber @bind-Value="_proposal.years_of_experience" class="form-control" required />
            </div>

            <div>
                <label>Description:</label>
                <InputTextArea @bind-Value="_proposal.description" class="form-control" required />
            </div>

            <div>
                <label>Total Hours:</label>
                <InputNumber @bind-Value="_proposal.total_hours" class="form-control" required />
            </div>

            <button class="btn btn-success mt-3" type="submit">Add</button>
        </EditForm>
    </div>
</div>

<hr class="separator" />

<div class="responsive-table">
    <h4 class="titles">All Work Proposals</h4>
    @if (!string.IsNullOrEmpty(_tableMessage))
    {
        <p style="color:@_tableMessageColor;">@_tableMessage</p>
    }
    @if (_workProposals is null)
    {
        <p>Loading proposals...</p>
    }
    else if (_workProposals.Count == 0)
    {
        <p>No proposals found.</p>
    }
    else
    {
        <table class="wptable">
            <thead>
                <tr>
                    <th style="width: 15%;">Name</th>
                    <th style="width: 15%;">Category</th>
                    <th style="width: 20%;">Skills</th>
                    <th style="width: 10%;">Experience</th>
                    <th style="width: 25%;">Description</th>
                    <th style="width: 10%;">Hours</th>
                    <th style="width: 15%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var proposal in _workProposals)
                {
                    int currentId = ((JsonElement)proposal["proposal_id"]).GetInt32();
                    bool isEditingRow = currentId == _editingRowId;

                <tr>
                    @if (isEditingRow)
                    {
                        <td><input @bind="_editingProposal.proposal_name" class="form-control" /></td>
                        <td><input @bind="_editingProposal.category" class="form-control" /></td>
                        <td><input @bind="_editingProposal.necessary_skills" class="form-control" /></td>
                        <td><input type="number" @bind="_editingProposal.years_of_experience" class="form-control" /></td>
                        <td><input @bind="_editingProposal.description" class="form-control" /></td>
                        <td><input type="number" @bind="_editingProposal.total_hours" class="form-control" /></td>
                        <td>
                            <div class="button-group">
                                <button class="btn btn-success" @onclick="UpdateProposal">Save</button>
                                <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                            </div>
                        </td>
                    }
                    else
                    {
                        <td>@proposal["proposal_name"]</td>
                        <td>@proposal["category"]</td>
                        <td>@proposal["necessary_skills"]</td>
                        <td>@proposal["years_of_experience"]</td>
                        <td>@proposal["description"]</td>
                        <td>@proposal["total_hours"]</td>
                        <td>
                            @{
                                int creatorId = ((JsonElement)proposal["fk_user_id"]).GetInt32();
                                int creatorRole = proposal.TryGetValue("fk_user_role_id", out var r) ? ((JsonElement)r).GetInt32() : 0;

                                bool canEditOrDelete = _roleId switch
                                {
                                    1 => true,
                                    2 => creatorId == _loggedInUserId || (_userIdsRole3.Contains(creatorId) && creatorId != 0),
                                    3 => creatorId == _loggedInUserId,
                                    _ => false
                                };
                            }

                            @if (canEditOrDelete)
                            {
                                <div class="button-group">
                                    <button class="btn btn-warning" @onclick="() => EditProposal(proposal)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => DeleteProposal(proposal)">Delete</button>
                                </div>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
</div>

@code {
    private WorkProposalModel _proposal = new();
    private List<Dictionary<string, object>>? _workProposals;
    private int _editingRowId = -1;
    private WorkProposalModel _editingProposal = new();
    private string _tableMessage = "";
    private string _formMessage = "";
    private string _tableMessageColor = "green";
    private string _formMessageColor = "green";
    private int _loggedInUserId;
    private string _username = "";
    private bool _loadingUser = true;
    private int _roleId;
    private HashSet<int> _userIdsRole3 = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var idString = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
            var username = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");
            var roleString = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");

            if (int.TryParse(idString, out int userId) &&
                !string.IsNullOrEmpty(username) &&
                int.TryParse(roleString, out int roleId))
            {
                _loggedInUserId = userId;
                _username = username;
                _roleId = roleId;
                _loadingUser = false;
                await LoadProposals();
                StateHasChanged();
            }
            else
            {
                _loadingUser = false;
                StateHasChanged();
                Navigation.NavigateTo("/login", true);
            }
        }
    }

    private async Task LoadProposals()
{
    try
    {
        var allProposals = await ApiHelper.GetFromApiAsync<List<Dictionary<string, object>>>("/work_proposals");

        switch (_roleId)
        {
            case 1:
                if (allProposals != null)
                    _workProposals = allProposals
                        .OrderBy(p => p.TryGetValue("proposal_name", out var name) ? name.ToString() : "")
                        .ToList();
                break;

            case 2:
                var allUsers = await ApiHelper.GetFromApiAsync<List<Dictionary<string, object>>>("/get_all_users");

                if (allUsers != null)
                {
                    var userIdsRole3 = allUsers
                        .Where(u => u.TryGetValue("fk_role_id", out var roleVal) && ((JsonElement)roleVal).GetInt32() == 3)
                        .Select(u => u.TryGetValue("user_id", out var idVal) ? ((JsonElement)idVal).GetInt32() : 0)
                        .Where(id => id != 0)
                        .ToHashSet();
                    _userIdsRole3 = userIdsRole3;

                    if (allProposals != null)
                        _workProposals = allProposals
                            .Where(p =>
                                p.TryGetValue("fk_user_id", out var userIdElement) &&
                                (
                                    ((JsonElement)userIdElement).GetInt32() == _loggedInUserId ||
                                    userIdsRole3.Contains(((JsonElement)userIdElement).GetInt32())
                                )
                            )
                            .OrderBy(p => p.TryGetValue("proposal_name", out var name) ? name.ToString() : "")
                            .ToList();
                }

                break;

            case 3:
                if (allProposals != null)
                    _workProposals = allProposals
                        .Where(p =>
                            p.TryGetValue("fk_user_id", out var userIdElement) &&
                            ((JsonElement)userIdElement).GetInt32() == _loggedInUserId
                        )
                        .OrderBy(p => p.TryGetValue("proposal_name", out var name) ? name.ToString() : "")
                        .ToList();
                break;

            default:
                _workProposals = new();
                break;
        }
    }
    catch (Exception ex)
    {
        await ShowFormMessage("Error loading proposals!", "red");
        Console.WriteLine($"Error loading proposals: {ex.Message}");
    }
}



    private void EditProposal(Dictionary<string, object> proposal)
    {
        _editingRowId = ((JsonElement)proposal["proposal_id"]).GetInt32();
        _editingProposal = new WorkProposalModel
        {
            proposal_id = _editingRowId,
            proposal_name = proposal["proposal_name"].ToString() ?? "",
            category = proposal["category"].ToString() ?? "",
            necessary_skills = proposal["necessary_skills"].ToString() ?? "",
            years_of_experience = ((JsonElement)proposal["years_of_experience"]).GetInt32(),
            description = proposal["description"].ToString() ?? "",
            total_hours = ((JsonElement)proposal["total_hours"]).GetInt32(),
            fk_user_id = proposal.TryGetValue("fk_user_id", out var fkUser) ? ((JsonElement)fkUser).GetInt32() : 0
        };
    }

    private async Task UpdateProposal()
    {
        try
        {
            var response = await ApiHelper.PutToApiAsync<WorkProposalModel, WorkProposalModel>(
                $"/work_proposals/{_editingProposal.proposal_id}", _editingProposal);

            if (response != null)
            {
                await ShowTableMessage("Proposal updated!", "green");
                _editingRowId = -1;
                _editingProposal = new();
                await LoadProposals();
            }
            else
            {
                await ShowTableMessage("Failed to update proposal!", "red");
            }
        }
        catch (Exception ex)
        {
            await ShowTableMessage("Failed to update proposal!", "red");
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        _editingRowId = -1;
        _editingProposal = new();
    }

    private async Task DeleteProposal(Dictionary<string, object> proposal)
    {
        try
        {
            if (proposal.TryGetValue("proposal_id", out var idObj))
            {
                int id = ((JsonElement)idObj).GetInt32();
                var success = await ApiHelper.DeleteFromApiAsync($"/work_proposals/{id}");

                if (success)
                {
                    await ShowTableMessage("Proposal deleted!", "green");
                    await LoadProposals();
                }
                else
                {
                    await ShowTableMessage("Failed to delete proposal!", "red");
                }
            }
        }
        catch (Exception ex)
        {
            await ShowTableMessage("Failed to delete proposal!", "red");
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task SubmitProposal()
    {
        try
        {
            _proposal.fk_user_id = _loggedInUserId;

            var response = await ApiHelper.PostToApiAsync<WorkProposalModel, WorkProposalModel>("/work_proposals", _proposal);

            if (response != null)
            {
                await ShowFormMessage("Proposal created successfully!", "green");
                _proposal = new();
                await LoadProposals();
            }
            else
            {
                await ShowFormMessage("Error creating proposal!", "red");
            }
        }
        catch (Exception ex)
        {
            await ShowFormMessage("Error creating proposal!", "red");
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task ShowFormMessage(string message, string color)
    {
        _formMessage = message;
        _formMessageColor = color;
        StateHasChanged();
        await Task.Delay(5000);
        _formMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ShowTableMessage(string message, string color)
    {
        _tableMessage = message;
        _tableMessageColor = color;
        StateHasChanged();
        await Task.Delay(5000);
        _tableMessage = string.Empty;
        StateHasChanged();
    }

    private class WorkProposalModel
    {
        public int proposal_id { get; set; }

        [Required(ErrorMessage = "Name is required.")]
        public string proposal_name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Category is required.")]
        public string category { get; set; } = string.Empty;

        [Required(ErrorMessage = "Skills are necessary.")]
        public string necessary_skills { get; set; } = string.Empty;

        [Range(1, int.MaxValue, ErrorMessage = "Years of experience must be greater than 0.")]
        public int years_of_experience { get; set; }

        [Required(ErrorMessage = "Description is mandatory.")]
        public string description { get; set; } = string.Empty;

        [Range(1, int.MaxValue, ErrorMessage = "Hours must be greater than 0.")]
        public int total_hours { get; set; }

        public int fk_user_id { get; set; }
    }
}

<style>
    .titles {
        margin-bottom: 1rem;
    }

    .separator {
        margin: 2rem 0;
        border-top: 2px solid #ccc;
    }

    .responsive-table {
        overflow-x: auto;
        margin-bottom: 2rem;
    }

    .wptable {
        width: 100%;
        border-collapse: collapse;
    }

    .wptable th, .wptable td {
        padding: 0.75rem;
        text-align: center;
        vertical-align: middle;
        border-bottom: 1px solid #ddd;
    }

    .wptable th {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        color: white;
    }

    .btn {
        padding: 0.3rem 0.6rem;
        font-size: 0.85rem;
        border-radius: 5px;
        margin: 0.1rem;
        white-space: nowrap;
    }

    .button-group {
        display: flex;
        gap: 0.4rem;
        flex-wrap: nowrap;
        align-items: center;
    }
    
    .form-wrapper {
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 2rem;
    }

    .form-container > div {
        margin-bottom: 1rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        font-size: 1rem;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .form-container button[type="submit"] {
        display: block;
        margin: 1rem auto 0 auto;
        width: 150px;
        font-size: 1rem;
        padding: 0.5rem 1rem;
    }

    td > button + button {
        margin-left: 0.5rem;
    }
</style>
