@page "/add-user"

@using Frontend.Helpers
@using global::Helpers.Models

@inject ApiHelper ApiHelper
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<PageTitle>Adicionar User</PageTitle>

@if (!string.IsNullOrEmpty(UserSession.Username))
{
<div style="display: flex; justify-content: space-between; align-items: center;">
    <p style="margin: 0;">Bem-vindo, <strong>@UserSession.Username</strong>!</p>
    <button class="btn btn-outline-danger" @onclick="Logout">
        <span class="oi oi-account-logout"></span> Sair
    </button>
</div>
}

<h1>Add User</h1>
@if (accessDenied)
{
<div class="alert alert-danger mt-5">
    <h4>Acess Denied</h4>
    <p>You don't have sufficient permissions to access this page.</p>
</div>
}
else
{
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-dark text-white">
                    <h3 class="mb-0">
                        <i class="bi bi-person-plus-fill me-2"></i>
                        Add User
                    </h3>
                </div>

            
                <div class="card-body">
                    <EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="mb-3 text-danger" />
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username"
                                       class="form-control"
                                       @bind-Value="userModel.Username"
                                       placeholder="Type the username" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password"
                                       type="password"
                                       class="form-control"
                                       @bind-Value="userModel.Password"
                                       placeholder="Type the password" />
                        </div>
                        
                        <div class="mb-4">
                            <label for="role" class="form-label">Role</label>
                            <InputSelect id="role"
                                         class="form-select"
                                         @bind-Value="userModel.RoleId">
                                <option value="" disabled>Select Role...</option>
                                <option value="1">Admin</option>
                                <option value="2">UserManager</option>
                                <option value="3">User</option>
                            </InputSelect>
                        </div>
                        
                        <div class="d-flex justify-content-end mt-4">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-check-circle-fill me-1"></i>
                                Add
                            </button>
                            <NavLink class="btn btn-secondary" href="user-info">
                                <i class="bi bi-x-circle-fill me-1"></i>
                                Cancel
                            </NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(successMessage))
            {
            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                <i class="bi bi-check-lg me-1"></i>
                @successMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
            <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-1"></i>
                @errorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            }
        </div>
    </div>
</div>
}

@code {
    private UserAddModel userModel = new();
    private string successMessage;
    private string errorMessage;
    private bool sessionChecked;
    private bool accessDenied;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sessionChecked)
        {
            sessionChecked = true;
            
            if (UserSession.UserId == null)
            {
                var userIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
                var roleIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
                var username = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
                    UserSession.UserId = uid;

                if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
                    UserSession.RoleId = roleId;

                if (!string.IsNullOrEmpty(username))
                    UserSession.Username = username;
            }
            
            if (UserSession.UserId == null)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                if (UserSession.RoleId != 1 && UserSession.RoleId != 2)
                {
                    accessDenied = true;
                    StateHasChanged();
                }
                else
                {
                    StateHasChanged();
                }
            }
        }
    }

    private async Task Logout()
    {
        await JsRuntime.InvokeVoidAsync("sessionStorage.clear");
        UserSession.UserId = null;
        UserSession.Username = string.Empty;
        UserSession.RoleId = null;

        Navigation.NavigateTo("/login?logout=true", forceLoad: true);
    }
    
 
    private async Task HandleValidSubmit()
    {
        successMessage = errorMessage = null;

        try
        {
            var payload = new
            {
                username   = userModel.Username,
                password   = userModel.Password,
                fk_role_id = userModel.RoleId
            };

            var createdUser = await ApiHelper.PostToApiAsync<object, UserAddModel>("/create_account", payload);

            if (createdUser is not null)
            {
                successMessage = $"User '{createdUser.Username}' (ID {createdUser.UserId}) successfully created!";
                userModel = new UserAddModel();
                Navigation.NavigateTo("/user-info");
            }
            else
            {
                errorMessage = "Unknown error: the server did not return user data.";
            }
        }
        catch (ApiException apiEx)
        {
            if (apiEx.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                errorMessage = apiEx.Message;
            }
            else
            {
                errorMessage = $"API error ({(int)apiEx.StatusCode}): {apiEx.Message}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}
