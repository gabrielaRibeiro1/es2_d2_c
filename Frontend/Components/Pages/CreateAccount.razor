@page "/create-account"

@using System.ComponentModel.DataAnnotations
@using global::Helpers.Models

@inject Helpers.ApiHelper ApiHelper
@rendermode InteractiveServer

<div class="card mt-5 mx-auto" style="max-width: 500px;">
    <div class="card-header" style="background-color:whitesmoke; color: black;">
        <h3 class="mb-0">Create Account</h3>
    </div>
    <div class="card-body">
        <EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="userModel.Username"/>
                <ValidationMessage For="() => userModel.Username"/>
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password"/>
                <ValidationMessage For="() => userModel.Password"/>
            </div>

            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="userModel.ConfirmPassword"/>
                <ValidationMessage For="() => userModel.ConfirmPassword"/>
            </div>

            <button type="submit" class="btn btn-success me-2">Save</button>
            <NavLink class="btn btn-secondary" href="/">Cancel</NavLink>
        </EditForm>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success mt-3">@successMessage</div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    private CreateUserModel userModel = new();
    private string successMessage;
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var createdUser = await ApiHelper.PostToApiAsync<CreateUserModel, UserViewModel>("create_account2", userModel);

            if (createdUser != null)
            {
                successMessage = $"User added successfully!";
                errorMessage = null;
                userModel = new CreateUserModel();
            }
            else
            {
                successMessage = null;
                errorMessage = "Error adding user.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            successMessage = null;
        }
    }

    public class CreateUserModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must have at least 6 characters.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm password.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }

}