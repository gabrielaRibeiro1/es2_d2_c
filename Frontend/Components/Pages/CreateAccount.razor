@page "/create-account"
@using System.ComponentModel.DataAnnotations
@using Frontend.Helpers
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ApiAuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer
@inject ApiHelper ApiHelper



<h3>Create Account</h3>

<EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit" >
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="userModel.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
    </div>



    <div>
    <button style="margin-top: 10px" type="submit" class="btn btn-primary">Save</button>
    <NavLink style="margin-top: 10px"  class="btn btn-secondary ms-2" href="/">
        Cancel
    </NavLink>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-2">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-2">@errorMessage</div>
}

@code {
    private CreateUserModel userModel = new CreateUserModel();
    
    private string successMessage;
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            
            bool success = await ApiHelper.PostToApiAsync("/create_account2", userModel);
            if (success)
            {
                successMessage = "User sucessfully added!";
                errorMessage = null;
             
                userModel = new CreateUserModel();
           
            }
            else
            {
                successMessage = null;
                errorMessage = "Error!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocorreu um erro: {ex.Message}";
            successMessage = null;
        }
    }
    public class CreateUserModel
    {
        
        public int? UserId { get; set; } 

        
        public string Username { get; set; }

       
        [DataType(DataType.Password)]
        public string Password { get; set; }
        
        public int RoleId { get; set; }

       
    }
}