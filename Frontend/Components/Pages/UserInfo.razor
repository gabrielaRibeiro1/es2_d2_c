@page "/user-info"
@inject IJSRuntime JSRuntime
@using Frontend.Helpers
@using global::Helpers.Models
@inject HttpClient Http
@inject ApiHelper apiHelper
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject ApiHelper ApiHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Informação Users</PageTitle>

@if (!string.IsNullOrEmpty(UserSession.Username))
{
<div style="display: flex; justify-content: space-between; align-items: center;">
    <p style="margin: 0;">Bem-vindo, <strong>@UserSession.Username</strong>!</p>
    <button class="btn btn-outline-danger" @onclick="Logout">
        <span class="oi oi-account-logout"></span> Sair
    </button>
</div>
}
<h1>Informação Users</h1>



<NavLink  class="btn btn-primary mb-3" href="add-user">
     Adicionar User
</NavLink>

@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
          
            <th>Username</th>
            <th>UserId</th>
            <th>Role</th>
            <th>Ações</th>
            
        </tr>
        </thead>
        <tbody>
        @foreach (var user in _users)
        {
            <tr>
                
                <td>@user.Username</td>
                <td>@user.User_id</td>
                <td>@user.RoleName</td>

                <td>
                    <div class="d-flex gap-2">

                        <NavLink class="btn btn-secondary btn-sm"
                                 href="@($"update-user-info/{user.User_id}")">
                            <i class="bi bi-pencil"></i>
                        </NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUserById(user.User_id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </td>


            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<UserViewModel>? _users;
    private string errorMessage = string.Empty;
    private bool sessionChecked = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sessionChecked)
        {
            sessionChecked = true;

            if (UserSession.UserId == null)
            {
                var userIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
                var roleIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
                var username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
                    UserSession.UserId = uid;

                if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
                    UserSession.RoleId = roleId;

                if (!string.IsNullOrEmpty(username))
                    UserSession.Username = username;
            }

            if (UserSession.UserId == null)
            {
                Navigation.NavigateTo("/Login");
            }
            else
            {
                // Opcional: podes carregar um relatório inicial aqui se quiseres
                // await LoadCategoryCountryReport();
                StateHasChanged();
            }
        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
        UserSession.UserId = null;
        UserSession.Username = string.Empty;
        UserSession.RoleId = null;

        Navigation.NavigateTo("/Login?logout=true", forceLoad: true);
    }
    protected override async Task OnInitializedAsync()
    {
        
            _users = await ApiHelper.GetFromApiAsync<List<UserViewModel>>("get_all_users");
        
    }
    
    
    
    
    private async Task DeleteUserById(int userId)
    {
        try
        {
            bool success = await ApiHelper.DeleteFromApiAsync($"delete_user_by_id/{userId}");

            if (success)
            {
                _users.RemoveAll(u => u.User_id == userId);
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "User deleted sucessfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}