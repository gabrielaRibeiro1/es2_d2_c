@page "/user-info"

@using Frontend.Helpers
@using global::Helpers.Models

@inject IJSRuntime JSRuntime
@inject ApiHelper ApiHelper

@rendermode InteractiveServer

<PageTitle>User Info</PageTitle>


<h1>User Info</h1>



<NavLink  class="btn btn-primary mb-3" href="add-user">
     Add User
</NavLink>

@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
          
            <th>Username</th>
            <th>UserId</th>
            <th>Role</th>
            <th>Actions</th>
            
        </tr>
        </thead>
        <tbody>
        @foreach (var user in _users)
        {
            <tr>
                
                <td>@user.Username</td>
                <td>@user.User_id</td>
                <td>@user.RoleName</td>

                <td>
                    <div class="d-flex gap-2">

                        <NavLink class="btn btn-secondary btn-sm"
                                 href="@($"update-user-info/{user.User_id}")">
                            <i class="bi bi-pencil"></i>
                        </NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUserById(user.User_id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </td>


            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<UserViewModel>? _users;
 

    protected override async Task OnInitializedAsync()
    {
        
            _users = await ApiHelper.GetFromApiAsync<List<UserViewModel>>("get_all_users");
        
    }
    
    
    
    
    private async Task DeleteUserById(int userId)
    {
        try
        {
            bool success = await ApiHelper.DeleteFromApiAsync($"delete_user_by_id/{userId}");

            if (success)
            {
                _users.RemoveAll(u => u.User_id == userId);
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "User deleted sucessfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}