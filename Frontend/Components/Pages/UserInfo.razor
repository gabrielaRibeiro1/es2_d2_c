@page "/user-info"

@using Frontend.Helpers
@using global::Helpers.Models

@inject IJSRuntime JSRuntime
@inject ApiHelper ApiHelper

@rendermode InteractiveServer

<h2>User's Info</h2>

<div class="text-center mb-3">
    <NavLink  class="btn btn-success mb-3" href="add-user">
         Add New User
    </NavLink>
</div>

<hr class="separator" />

@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered">
    <thead>
        <tr>
            <th>Username</th>
            <th>UserId</th>
            <th>Role</th>
            <th>Actions</th>
            
        </tr>
        </thead>
        <tbody>
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.Username</td>
                <td>@user.User_id</td>
                <td>@user.RoleName</td>

                <td>
                    <div class="d-flex justify-content-center gap-2">
                        <NavLink class="btn btn-warning action-btn"
                                 href="@($"update-user-info/{user.User_id}")">
                            Edit
                        </NavLink>
                        <button class="btn btn-danger action-btn" @onclick="() => DeleteUserById(user.User_id)">
                            Delete
                        </button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<UserViewModel>? _users;
    
    protected override async Task OnInitializedAsync()
    {
        
            _users = await ApiHelper.GetFromApiAsync<List<UserViewModel>>("get_all_users");
        
    }
    
    private async Task DeleteUserById(int userId)
    {
        try
        {
            bool success = await ApiHelper.DeleteFromApiAsync($"delete_user_by_id/{userId}");

            if (success)
            {
                _users.RemoveAll(u => u.User_id == userId);
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "User deleted sucessfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}

<style>
    h2 {
        text-align: center;
    }
    table {
        max-width: 900px;
        margin-left: auto;
        margin-right: auto;
    }

    .table th, .table td {
        padding: 0.35rem 0.5rem;
        vertical-align: middle;
        text-align: center;
    }
    
    .action-btn {
        min-width: 90px;
        height: 36px;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .table th {
        background: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        color: white;
    }
</style>
