@page "/perfil"

@using Frontend.Helpers
@using global::Helpers.Models

@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject ApiHelper ApiHelper

@rendermode InteractiveServer

<h2>Profile</h2>

<div class="card shadow-sm">
    <div class="card-body">
        @if (!_sessionChecked)
        {
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    
        else if (_currentUser == null)
        {
            <div class="text-center py-4">
                <p class="text-muted mb-0">@_errorMessage</p>
            </div>
        }
        else
        {
            <h5 class="card-title">My Info</h5>
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Username:</dt>
                        <dd class="col-sm-8">@_currentUser.Username</dd>

                        <dt class="col-sm-4">Role:</dt>
                        <dd class="col-sm-8">@_currentUser.RoleName</dd>

                    </dl>
                </div>
                
            </div>
        }
    </div>
</div>

@code {
    private UserViewModel? _currentUser;
    private string _errorMessage = string.Empty;
    private bool _sessionChecked;
    private bool _accessDenied;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_sessionChecked)
        {
            _sessionChecked = true;
            
            if (UserSession.UserId == null)
            {
                var userIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
                var roleIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
                var username = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
                    UserSession.UserId = uid;

                if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
                    UserSession.RoleId = roleId;

                if (!string.IsNullOrEmpty(username))
                    UserSession.Username = username;
            }
            
            if (UserSession.UserId == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }
            
            if (UserSession.RoleId == null)
            {
                _accessDenied = true;
                StateHasChanged();
                return;
            }
            
            await LoadCurrentUser();
            StateHasChanged();
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var id = UserSession.UserId!.Value;
            _currentUser = await ApiHelper.GetFromApiAsync<UserViewModel>($"get_user_by_id/{id}");

            if (_currentUser == null)
            {
                _errorMessage = "Your profile data could not be found.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading profile data: {ex.Message}";
        }
    }
}
