@page "/reports"

@using Frontend.Helpers

@inject HttpClient Http
@inject ApiHelper apiHelper
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h3>Relatórios de Preço Médio Mensal</h3>

@if (!string.IsNullOrEmpty(UserSession.Username))
{
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <p style="margin: 0;">Bem-vindo, <strong>@UserSession.Username</strong>!</p>
        <button class="btn btn-outline-danger" @onclick="Logout">
            <span class="oi oi-account-logout"></span> Sair
        </button>
    </div>
}

<div class="mb-3 mt-3">
    <button class="btn btn-primary me-2" @onclick="LoadCategoryCountryReport">Ver Relatório por Categoria e País</button>
    <button class="btn btn-secondary" @onclick="LoadSkillReport">Ver Relatório por Skill</button>
</div>

@if (categoryCountryReport?.Any() == true)
{
    <h4>Relatório por Categoria e País</h4>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Categoria - País</th>
                <th>Preço Médio Mensal (€)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in categoryCountryReport)
            {
                <tr>
                    <td>@item.Key</td>
                    <td>@item.Value.ToString("F2")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (skillReport?.Any() == true)
{
    <h4>Relatório por Skill</h4>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Skill</th>
                <th>Preço Médio Mensal (€)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in skillReport)
            {
                <tr>
                    <td>@item.Key</td>
                    <td>@item.Value.ToString("F2")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private Dictionary<string, float>? categoryCountryReport;
    private Dictionary<string, float>? skillReport;
    private string errorMessage = string.Empty;
    private bool sessionChecked = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sessionChecked)
        {
            sessionChecked = true;

            if (UserSession.UserId == null)
            {
                var userIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
                var roleIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
                var username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
                    UserSession.UserId = uid;

                if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
                    UserSession.RoleId = roleId;

                if (!string.IsNullOrEmpty(username))
                    UserSession.Username = username;
            }

            if (UserSession.UserId == null)
            {
                Navigation.NavigateTo("/Login");
            }
            else
            {
                // Opcional: podes carregar um relatório inicial aqui se quiseres
                // await LoadCategoryCountryReport();
                StateHasChanged();
            }
        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
        UserSession.UserId = null;
        UserSession.Username = string.Empty;
        UserSession.RoleId = null;

        Navigation.NavigateTo("/Login?logout=true", forceLoad: true);
    }

    private async Task LoadCategoryCountryReport()
    {
        errorMessage = string.Empty;
        try
        {
            var response = await Http.GetAsync("/reports/category-country");
            if (response.IsSuccessStatusCode)
            {
                categoryCountryReport = await response.Content.ReadFromJsonAsync<Dictionary<string, float>>();
                skillReport = null;
            }
            else
            {
                errorMessage = $"Erro ao obter relatório: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
    }

    private async Task LoadSkillReport()
    {
        errorMessage = string.Empty;
        try
        {
            var response = await Http.GetAsync("/reports/skill");
            if (response.IsSuccessStatusCode)
            {
                skillReport = await response.Content.ReadFromJsonAsync<Dictionary<string, float>>();
                categoryCountryReport = null;
            }
            else
            {
                errorMessage = $"Erro ao obter relatório: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
    }
}
