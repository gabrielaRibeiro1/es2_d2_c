@page "/skill-management"

@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h3>Skill Management</h3>

@if (UserSession.RoleId == 1 || UserSession.RoleId == 2)
{
    <div class="card mb-4">
        <div class="card-body">
            <h4>@(isEditing ? "Edit Skill" : "Create New Skill")</h4>

            <EditForm Model="@newSkill" OnValidSubmit="@((isEditing) ? UpdateSkill : CreateSkill)" FormName="createSkillForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="skillName">Name *</label>
                    <InputText id="skillName"
                               @bind-Value="newSkill.name"
                               class="form-control"
                               placeholder="Type the skill's name" />
                    <ValidationMessage For="@(() => newSkill.name)" />
                </div>

                <div class="form-group">
                    <label for="skillArea">Area *</label>
                    <InputText id="skillArea"
                               @bind-Value="newSkill.area"
                               class="form-control"
                               placeholder="Type the skill's applicable area" />
                    <ValidationMessage For="@(() => newSkill.area)" />
                </div>

                <button type="submit" class="btn btn-success mt-3" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <span> Saving...</span>
                    }
                    else
                    {
                        @if (isEditing)
                        {
                            <span class="oi oi-check"></span> @("Save Changes")
                        }
                        else
                        {
                            <span class="oi oi-plus"></span> @("Add Skill")
                        }
                    }
                </button>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-3">@successMessage</div>
                }
            </EditForm>
        </div>
    </div>
}

<h4 class="mt-5">Existing Skill List</h4>

<table class="table table-bordered">
    <thead class="thead-dark">
    <tr>
        <th>Name</th>
        <th>Area</th>
        @if (UserSession.RoleId == 1 || UserSession.RoleId == 2)
        {
            <th>Actions</th>
        }
    </tr>
    </thead>
    <tbody>
    @if (isLoading && skills == null)
    {
        <tr>
            <td colspan="@(UserSession.RoleId == 1 || UserSession.RoleId == 2 ? 3 : 2)" class="text-center text-muted">
                <span class="spinner-border spinner-border-sm" role="status"></span>
                Loading...
            </td>
        </tr>
    }
    else if (skills == null || !skills.Any())
    {
        <tr>
            <td colspan="@(UserSession.RoleId == 1 || UserSession.RoleId == 2 ? 3 : 2)" class="text-center text-muted">No skills found.</td>
        </tr>
    }
    else
    {
        @foreach (var skill in skills.OrderBy(s => s.name))
        {
            <tr>
                <td>@skill.name</td>
                <td>@skill.area</td>
                @if (UserSession.RoleId == 1 || UserSession.RoleId == 2)
                {
                    <td>
                        <button @onclick="@(() => EditSkill(skill))" class="btn btn-sm btn-warning mr-2">
                            <span class="oi oi-pencil"></span> Edit
                        </button>
                        <button @onclick="@(() => DeleteSkill(skill.skill_id))" class="btn btn-sm btn-danger">
                            <span class="oi oi-trash"></span> Delete
                        </button>
                    </td>
                }
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private List<Skill>? skills;
    private Skill newSkill = new();
    private bool isLoading;
    private bool isEditing;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool sessionChecked;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sessionChecked)
        {
            sessionChecked = true;

            var userIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
            var roleIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
            var username = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

            if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
                UserSession.UserId = uid;
            else
                UserSession.UserId = null;

            if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
                UserSession.RoleId = roleId;
            else
                UserSession.RoleId = null;

            if (!string.IsNullOrEmpty(username))
                UserSession.Username = username;
            else
                UserSession.Username = string.Empty;
            
            if (UserSession.UserId == null)
            {
                UserSession.Username = string.Empty;
                UserSession.RoleId = null;
                Navigation.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                await LoadSkills();
                StateHasChanged();
            }
        }
    }

    private async Task LoadSkills()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await Http.GetAsync("/skills");

            if (response.IsSuccessStatusCode)
            {
                skills = await response.Content.ReadFromJsonAsync<List<Skill>>();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = $"Erro ao carregar: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateSkill()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var response = await Http.PostAsJsonAsync("/skills", newSkill);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Skill successfully created!";
                await LoadSkills();
                newSkill = new Skill();
                isEditing = false;
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(errorMessage))
                    errorMessage = $"Erro: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateSkill()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await Http.PutAsJsonAsync($"/skills/{newSkill.skill_id}", newSkill);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Skill updated successfully!";
                await LoadSkills();
                newSkill = new Skill();
                isEditing = false;
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(errorMessage))
                    errorMessage = $"Erro: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void EditSkill(Skill skill)
    {
        newSkill = new Skill
        {
            skill_id = skill.skill_id,
            name = skill.name,
            area = skill.area
        };
        isEditing = true;
        successMessage = "Edit the data above and click Save";
        StateHasChanged();
    }

    private async Task DeleteSkill(int skillId)
    {
        try
        {
            if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this skill?"))
            {
                isLoading = true;
                StateHasChanged();

                var response = await Http.DeleteAsync($"/skills/{skillId}");

                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Skill deleted successfully!";
                    await LoadSkills();
                }
                else
                {
                    errorMessage = await response.Content.ReadAsStringAsync();
                    if (string.IsNullOrEmpty(errorMessage))
                        errorMessage = $"Erro ao excluir: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class Skill
    {
        public int skill_id { get; set; }

        [Required(ErrorMessage = "Skill name is required")]
        public string name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Skill area is required")]
        public string area { get; set; } = string.Empty;
    }
    
    public static class UserSession
    {
        public static int? UserId { get; set; }
        public static int? RoleId { get; set; }
        public static string Username { get; set; } = string.Empty;
    }
}

<style>
    h3 {
        margin-bottom: 1.5rem;
    }

    .header-session {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .logout-btn {
        padding: 0.35rem 0.6rem;
        font-size: 0.9rem;
    }

    .card.mb-4 {
        margin-bottom: 2rem !important;
    }

    .table th {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        color: white;
        text-align: center;
        vertical-align: middle;
    }

    .table td {
        text-align: center;
        vertical-align: middle;
    }

    .btn {
        padding: 0.4rem 0.75rem;
        font-size: 0.9rem;
        border-radius: 5px;
        margin: 0.1rem;
    }

    .btn-sm {
        padding: 0.35rem 0.6rem;
        font-size: 0.8rem;
    }

    .me-1 {
        margin-right: 0.5rem;
    }

    .form-label {
        font-weight: bold;
    }

    .list-group-item button {
        font-size: 0.8rem;
        padding: 0.35rem 0.6rem;
    }
</style>
