@page "/talent-management"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Frontend.Helpers
@rendermode InteractiveServer

<h3 class="mt-3">Gestão de Talentos</h3>

@if (!string.IsNullOrEmpty(UserSession.Username))
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <p class="mb-0">Bem-vindo, <strong>@UserSession.Username</strong>!</p>
        <button class="btn btn-outline-danger" @onclick="Logout">
            <span class="oi oi-account-logout"></span> Sair
        </button>
    </div>
}

<div class="card mb-4">
    <div class="card-body">
        <h4>@(isEditing ? "Editar Perfil" : "Criar Novo Perfil")</h4>

        <EditForm Model="@newProfile" OnValidSubmit="@((isEditing) ? UpdateProfile : CreateProfile)">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <!-- Lado Esquerdo: Dados do Perfil -->
                <div class="col-md-6">
                    <InputText class="form-control mb-2" placeholder="Nome do Perfil *" @bind-Value="newProfile.ProfileName" />
                    <InputText class="form-control mb-2" placeholder="País *" @bind-Value="newProfile.Country" />
                    <InputText class="form-control mb-2" placeholder="Email *" @bind-Value="newProfile.Email" />
                    <label class="form-label">Preço (em EUR) *</label>
                    <InputNumber class="form-control mb-2" placeholder="Preço *" @bind-Value="newProfile.Price" />
                    <InputText class="form-control mb-2" placeholder="Categoria" @bind-Value="newProfile.Category" />
                    <InputSelect class="form-control mb-2" @bind-Value="newProfile.Privacy">
                        <option value="0">Público</option>
                        <option value="1">Privado</option>
                    </InputSelect>
                </div>

                <!-- Lado Direito: Skills e Experiências -->
                <div class="col-md-6">
                    <h5>Skills</h5>
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label">Skill</label>
                            <InputSelect class="form-control mb-2" @bind-Value="newSkill.SkillName">
                                <option disabled selected value="">Selecione uma Skill</option>
                                @foreach (var skill in availableSkills)
                                {
                                    <option value="@skill">@skill</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-3">
                            <label class="form-label">Anos de Experiência</label>
                            <InputNumber class="form-control mb-2" @bind-Value="newSkill.YearsOfExperience" />
                        </div>
                        <div class="col-3 d-flex flex-column">
                            <label class="form-label invisible">Adicionar</label>
                            <button type="button" class="btn btn-outline-primary w-100" @onclick="AddSkill">Adicionar skill</button>
                        </div>
                    </div>

                    @if (newProfile.Skills.Any())
                    {
                        <ul class="list-group mb-3">
                            @foreach (var skill in newProfile.Skills)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @skill.SkillName (@skill.YearsOfExperience) anos
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveSkill(skill)">Remover</button>
                                </li>
                            }
                        </ul>
                    }

                    <h5>Experiências</h5>
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label">Nome da Empresa</label>
                            <InputText class="form-control mb-2" @bind-Value="newExperience.CompanyName" />
                        </div>
                        <div class="col-3">
                            <label class="form-label">Ano de Início</label>
                            <InputNumber class="form-control mb-2" @bind-Value="newExperience.StartYear" />
                        </div>
                        <div class="col-3">
                            <label class="form-label">Ano de Fim</label>
                            <InputNumber class="form-control mb-2" @bind-Value="newExperience.EndYear" />
                        </div>
                        <div class="col-12">
                            <button type="button" class="btn btn-outline-primary w-100" @onclick="AddExperience">Adicionar Experiência</button>
                        </div>
                    </div>

                    @if (newProfile.Experiences.Any())
                    {
                        <ul class="list-group mb-2">
                            @foreach (var exp in newProfile.Experiences)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @exp.CompanyName (@exp.StartYear - @exp.EndYear)
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveExperience(exp)">Remover</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <button class="btn btn-success mt-3 px-4" type="submit" disabled="@isLoading">
                    @(isEditing ? "Guardar Alterações" : "Criar Perfil")
                </button>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<h4 class="mt-4">Perfis Públicos</h4>

<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Email</th>
                <th>País</th>
                <th>Preço</th>
                <th>Skills</th>
                <th>Experiências</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @if (profiles is null)
            {
                <tr><td colspan="7">Carregando...</td></tr>
            }
            else if (!profiles.Any())
            {
                <tr><td colspan="7">Nenhum perfil encontrado.</td></tr>
            }
            else
            {
                @foreach (var p in profiles)
                {
                    <tr>
                        <td>@p.ProfileName</td>
                        <td>@p.Email</td>
                        <td>@p.Country</td>
                        <td>@p.Price</td>
                        <td>
                            @foreach (var skill in p.Skills)
                            {
                                <span class="badge bg-info text-dark me-1">@skill.SkillName (@skill.YearsOfExperience)</span>
                            }
                        </td>
                        <td>
                            @if (p.Experiences != null && p.Experiences.Any())
                            {
                                @foreach (var exp in p.Experiences)
                                {
                                    <span class="badge bg-secondary me-1">@exp.CompanyName [@exp.StartYear - @exp.EndYear]</span>
                                }
                            }
                            else
                            {
                                <span class="text-muted">Nenhuma</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary me-1" @onclick="@(() => EditProfile(p))">Editar</button>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteProfile(p.ProfileName))">Excluir</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>



@code {
    private List<TalentProfileDto>? profiles;
    private TalentProfileDto newProfile = new();
    private SkillDto newSkill = new();
    private List<string> availableSkills = new();
    private bool isLoading = false;
    private bool isEditing = false;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private bool initialized = false;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("/talent-management"))
        {
            await CheckSessionAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true;
            await CheckSessionAsync();
            StateHasChanged();
        }
    }

    private async Task CheckSessionAsync()
    {
        var userIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
        var roleIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
        var username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

        if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
            UserSession.UserId = uid;
        else
            UserSession.UserId = null;

        if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
            UserSession.RoleId = roleId;
        else
            UserSession.RoleId = null;

        UserSession.Username = username;

        if (UserSession.UserId == null)
        {
            NavigationManager.NavigateTo("/Login");
        }
        else
        {
            newProfile.FkUserId = UserSession.UserId.Value;
            await LoadProfiles();
            await LoadAvailableSkills();
        }
    }

    private async Task LoadProfiles()
    {
        try
        {
            isLoading = true;
            profiles = await Http.GetFromJsonAsync<List<TalentProfileDto>>("/talent_profiles/list");
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar perfis: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAvailableSkills()
    {
        try
        {
            var json = await Http.GetStreamAsync("/skills/list");
            var skills = await JsonSerializer.DeserializeAsync<List<string>>(json);

            if (skills is not null)
            {
                availableSkills = skills;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar lista de skills: {ex.Message}";
        }
    }

    private async Task CreateProfile()
    {
        try
        {
            isLoading = true;
            newProfile.FkUserId = UserSession.UserId!.Value;

            var url = $"/talent_profile/add_profile?" +
                      $"profile_name={Uri.EscapeDataString(newProfile.ProfileName)}" +
                      $"&country={Uri.EscapeDataString(newProfile.Country)}" +
                      $"&email={Uri.EscapeDataString(newProfile.Email)}" +
                      $"&price={newProfile.Price}" +
                      $"&privacy={newProfile.Privacy}" +
                      $"&category={Uri.EscapeDataString(newProfile.Category)}" +
                      $"&fk_user_id={newProfile.FkUserId}";

            var response = await Http.PostAsync(url, null);

            if (response.IsSuccessStatusCode)
            {
                foreach (var skill in newProfile.Skills)
                {
                    var skillUrl = $"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_skill?" +
                                   $"skill_name={Uri.EscapeDataString(skill.SkillName)}" +
                                   $"&years_of_experience={skill.YearsOfExperience}";

                    var skillResponse = await Http.PostAsync(skillUrl, null);
                    if (!skillResponse.IsSuccessStatusCode)
                    {
                        errorMessage += $" Erro ao adicionar skill '{skill.SkillName}': {await skillResponse.Content.ReadAsStringAsync()}";
                    }
                }
                
                foreach (var exp in newProfile.Experiences)
                {
                    var expUrl = $"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_experience?" +
                                 $"company_name={Uri.EscapeDataString(exp.CompanyName)}" +
                                 $"&start_year={exp.StartYear}&end_year={exp.EndYear}";

                    var expResponse = await Http.PostAsync(expUrl, null);
                    if (!expResponse.IsSuccessStatusCode)
                    {
                        errorMessage += $" Erro ao adicionar experiência '{exp.CompanyName}': {await expResponse.Content.ReadAsStringAsync()}";
                    }
                }


                successMessage = "Perfil criado com sucesso!";
                await LoadProfiles();
                newProfile = new TalentProfileDto();
                newProfile.FkUserId = UserSession.UserId!.Value;
                newSkill = new SkillDto();
                isEditing = false;
            }
            else
            {
                errorMessage = $"Erro ao criar: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateProfile()
    {
        try
        {
            isLoading = true;
            newProfile.FkUserId = UserSession.UserId!.Value;

            var url = $"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/update?" +
                      $"country={Uri.EscapeDataString(newProfile.Country)}" +
                      $"&email={Uri.EscapeDataString(newProfile.Email)}" +
                      $"&price={newProfile.Price}" +
                      $"&privacy={newProfile.Privacy}" +
                      $"&category={Uri.EscapeDataString(newProfile.Category)}" +
                      $"&fk_user_id={newProfile.FkUserId}";

            var response = await Http.PutAsync(url, null);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Perfil atualizado com sucesso!";
                await LoadProfiles();
                newProfile = new TalentProfileDto();
                newProfile.FkUserId = UserSession.UserId!.Value;
                newSkill = new SkillDto();
                isEditing = false;
            }
            else
            {
                errorMessage = $"Erro ao atualizar: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteProfile(string profileName)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Deseja realmente excluir o perfil '{profileName}'?"))
            return;

        try
        {
            isLoading = true;
            var response = await Http.DeleteAsync($"/talent_profiles/{Uri.EscapeDataString(profileName)}/delete");

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Perfil excluído com sucesso!";
                await LoadProfiles();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditProfile(TalentProfileDto profile)
    {
        newProfile = new TalentProfileDto
        {
            ProfileName = profile.ProfileName,
            Country = profile.Country,
            Email = profile.Email,
            Price = profile.Price,
            Privacy = profile.Privacy,
            Category = profile.Category,
            FkUserId = profile.FkUserId,
            Skills = profile.Skills.Select(s => new SkillDto { SkillName = s.SkillName, YearsOfExperience = s.YearsOfExperience }).ToList()
        };

        isEditing = true;
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private void AddSkill()
    {
        if (!string.IsNullOrEmpty(newSkill.SkillName) && newSkill.YearsOfExperience > 0)
        {
            if (!newProfile.Skills.Any(s => s.SkillName == newSkill.SkillName))
            {
                newProfile.Skills.Add(new SkillDto
                {
                    SkillName = newSkill.SkillName,
                    YearsOfExperience = newSkill.YearsOfExperience
                });

                newSkill = new SkillDto();
            }
        }
    }

    private void RemoveSkill(SkillDto skill)
    {
        newProfile.Skills.Remove(skill);
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
        UserSession.UserId = null;
        UserSession.RoleId = null;
        UserSession.Username = null;
        NavigationManager.NavigateTo("/Login");
    }
    
    private ExperienceDto newExperience = new();

    private void AddExperience()
    {
        if (!string.IsNullOrEmpty(newExperience.CompanyName) &&
            newExperience.StartYear > 0 &&
            newExperience.EndYear > 0)
        {
            newProfile.Experiences.Add(new ExperienceDto
            {
                CompanyName = newExperience.CompanyName,
                StartYear = newExperience.StartYear,
                EndYear = newExperience.EndYear
            });

            newExperience = new ExperienceDto();
        }
    }


    private void RemoveExperience(ExperienceDto exp)
    {
        newProfile.Experiences.Remove(exp);
    }


    public class TalentProfileDto
    {
        public string ProfileName { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Privacy { get; set; } = 0;
        public string Category { get; set; } = string.Empty;
        public int FkUserId { get; set; }
        public List<SkillDto> Skills { get; set; } = new();
        public List<ExperienceDto> Experiences { get; set; } = new(); // ⬅️ new
    }


    public class SkillDto
    {
        public string SkillName { get; set; } = string.Empty;
        public int YearsOfExperience { get; set; }
    }

    public class ExperienceDto
    {
        public string CompanyName { get; set; } = string.Empty;
        public int StartYear { get; set; }
        public int EndYear { get; set; }
    }


    public static class UserSession
    {
        public static int? UserId { get; set; }
        public static int? RoleId { get; set; }
        public static string? Username { get; set; }
    }
}
