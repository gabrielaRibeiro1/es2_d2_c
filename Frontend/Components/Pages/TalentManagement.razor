@page "/talent-management"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations

<h3>Gestão de Talentos</h3>

<div class="card mb-4">
    <div class="card-body">
        <h4>Criar Novo Talento</h4>

        <EditForm Model="@newTalent" OnValidSubmit="@CreateTalent" FormName="createTalentForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Nome *</label>
                <InputText @bind-Value="newTalent.profile_name" class="form-control" />
                <ValidationMessage For="@(() => newTalent.profile_name)" />
            </div>

            <div class="form-group">
                <label>Email *</label>
                <InputText @bind-Value="newTalent.email" class="form-control" />
                <ValidationMessage For="@(() => newTalent.email)" />
            </div>

            <div class="form-group">
                <label>País</label>
                <InputText @bind-Value="newTalent.country" class="form-control" />
            </div>

            <div class="form-group">
                <label>Preço</label>
                <InputNumber @bind-Value="newTalent.price" class="form-control" />
            </div>

            <div class="form-group">
                <label>Privacidade (0=Público, 1=Privado)</label>
                <InputNumber @bind-Value="newTalent.privacy" class="form-control" min="0" max="1" step="1" />
            </div>

            <button type="submit" class="btn btn-success mt-3" disabled="@isLoading">
                @if (isLoading)
                {
                <span class="spinner-border spinner-border-sm" role="status"></span>
                <span> Criando...</span>
                }
                else
                {
                <span class="oi oi-plus"></span> @("Criar Talento")
                }
            </button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
            <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </EditForm>
    </div>
</div>

<h4 class="mt-5">Lista de Talentos</h4>

<table class="table table-striped table-hover">
    <thead class="thead-dark">
    <tr>
        <th>Nome</th>
        <th>Email</th>
        <th>País</th>
        <th>Preço</th>
        <th>Privacidade</th>
        <th class="text-center" style="width:150px;">Ações</th>
    </tr>
    </thead>
    <tbody>
    @if (isLoading && talents == null)
    {
    <tr>
        <td colspan="6" class="text-center text-muted">
            <span class="spinner-border spinner-border-sm" role="status"></span>
            Carregando...
        </td>
    </tr>
    }
    else if (talents == null || !talents.Any())
    {
    <tr>
        <td colspan="6" class="text-center text-muted">Nenhum talento encontrado</td>
    </tr>
    }
    else
    {
    @foreach (var talent in talents)
    {
    <tr>
        <td>@talent.profile_name</td>
        <td>@talent.email</td>
        <td>@talent.country</td>
        <td>@talent.price.ToString("0.00")</td>
        <td>@(talent.privacy == 1 ? "Privado" : "Público")</td>
        <td class="text-center">
            <button @onclick="() => EditTalent(talent)"
                    class="btn btn-sm btn-warning mr-1"
                    title="Editar">
                <span class="oi oi-pencil"></span>
            </button>
            <button @onclick="() => DeleteTalent(talent.profile_id)"
                    class="btn btn-sm btn-danger"
                    title="Remover">
                <span class="oi oi-trash"></span>
            </button>
        </td>
    </tr>
    }
    }
    </tbody>
</table>

@if (isEditing)
{
<div class="modal" style="display:block; background:rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Editar Talento</h5>
                <button type="button" class="close" @onclick="CancelEdit">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@currentEditTalent" OnValidSubmit="@UpdateTalent">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Nome *</label>
                        <InputText @bind-Value="currentEditTalent.profile_name" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Email *</label>
                        <InputText @bind-Value="currentEditTalent.email" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>País</label>
                        <InputText @bind-Value="currentEditTalent.country" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Preço</label>
                        <InputNumber @bind-Value="currentEditTalent.price" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Privacidade</label>
                        <InputNumber @bind-Value="currentEditTalent.privacy" class="form-control" min="0" max="1" step="1" />
                    </div>

                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <span> Guardando...</span>
                        }
                        else
                        {
                        <span>Guardar Alterações</span>
                        }
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
}

@code {
private List<TalentProfile> talents;
private TalentProfile newTalent = new();
private TalentProfile currentEditTalent = new();
private bool isEditing = false;
private bool isLoading = false;
private string errorMessage = string.Empty;

protected override async Task OnInitializedAsync()
{
await LoadTalents();
}

private async Task LoadTalents()
{
try
{
isLoading = true;
StateHasChanged();

var response = await Http.GetAsync("/talent_profiles");

if (response.IsSuccessStatusCode)
{
talents = await response.Content.ReadFromJsonAsync<List<TalentProfile>>();
}
else
{
errorMessage = $"Erro ao carregar: {response.StatusCode}";
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
}
catch (Exception ex)
{
errorMessage = $"Erro: {ex.Message}";
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
finally
{
isLoading = false;
StateHasChanged();
}
}

private async Task CreateTalent()
{
try
{
isLoading = true;
errorMessage = string.Empty;
StateHasChanged();

var response = await Http.PostAsJsonAsync("/talent_profiles", newTalent);

if (response.IsSuccessStatusCode)
{
newTalent = new TalentProfile();
await LoadTalents();
}
else
{
errorMessage = await response.Content.ReadAsStringAsync();
if (string.IsNullOrEmpty(errorMessage))
{
errorMessage = $"Erro: {response.StatusCode}";
}
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
}
catch (Exception ex)
{
errorMessage = $"Erro: {ex.Message}";
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
finally
{
isLoading = false;
StateHasChanged();
}
}

private void EditTalent(TalentProfile talent)
{
currentEditTalent = new TalentProfile
{
profile_id = talent.profile_id,
profile_name = talent.profile_name,
email = talent.email,
country = talent.country,
price = talent.price,
privacy = talent.privacy,
fk_user_id = talent.fk_user_id,
user_id = talent.user_id
};
isEditing = true;
}

private async Task UpdateTalent()
{
try
{
isLoading = true;
errorMessage = string.Empty;
StateHasChanged();

var response = await Http.PutAsJsonAsync($"/talent_profiles/{currentEditTalent.profile_id}", currentEditTalent);

if (response.IsSuccessStatusCode)
{
isEditing = false;
await LoadTalents();
}
else
{
errorMessage = await response.Content.ReadAsStringAsync();
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
}
catch (Exception ex)
{
errorMessage = $"Erro: {ex.Message}";
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
finally
{
isLoading = false;
StateHasChanged();
}
}

private void CancelEdit()
{
isEditing = false;
errorMessage = string.Empty;
}

private async Task DeleteTalent(int id)
{
try
{
isLoading = true;
errorMessage = string.Empty;
StateHasChanged();

var response = await Http.DeleteAsync($"/talent_profiles/{id}");

if (response.IsSuccessStatusCode)
{
await LoadTalents();
}
else
{
errorMessage = await response.Content.ReadAsStringAsync();
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
}
catch (Exception ex)
{
errorMessage = $"Erro: {ex.Message}";
await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
}
finally
{
isLoading = false;
StateHasChanged();
}
}

public class TalentProfile
{
public int profile_id { get; set; }

[Required(ErrorMessage = "Nome é obrigatório")]
public string profile_name { get; set; }

[Required(ErrorMessage = "Email é obrigatório")]
[EmailAddress(ErrorMessage = "Formato de email inválido")]
public string email { get; set; }

public string country { get; set; }
public float price { get; set; }

[Range(0, 1, ErrorMessage = "Privacidade deve ser 0 (Público) ou 1 (Privado)")]
public float privacy { get; set; }

public int fk_user_id { get; set; }
public int user_id { get; set; }
}
}
