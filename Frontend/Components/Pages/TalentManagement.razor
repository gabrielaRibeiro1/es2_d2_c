@page "/talent-management"

@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h2>Talent Management</h2>

@if (!string.IsNullOrEmpty(UserSession.Username))
{
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
        <p style="margin: 0;">Bem-vindo, <strong>@UserSession.Username</strong>!</p>
        <button class="btn btn-outline-danger" @onclick="Logout">
            <span class="oi oi-account-logout"></span> Sair
        </button>
    </div>
}

<div class="card mb-4">
    <div class="card-body">
        <h4>@(isEditing ? "Edit Talent Profile" : "Create New Talent")</h4>

        <EditForm Model="@newProfile" OnValidSubmit="@((isEditing) ? UpdateProfile : CreateProfile)">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText class="form-control mb-2" placeholder="Talent Name *" @bind-Value="newProfile.ProfileName" />
            <InputText class="form-control mb-2" placeholder="Country *" @bind-Value="newProfile.Country" />
            <InputText class="form-control mb-2" placeholder="Email *" @bind-Value="newProfile.Email" />
            <label class="form-label">Price (in EUR) *</label>
            <InputNumber class="form-control mb-2" placeholder="Price *" @bind-Value="newProfile.Price" />
            <InputText class="form-control mb-2" placeholder="Category" @bind-Value="newProfile.Category" />

            <InputSelect class="form-control mb-2" @bind-Value="newProfile.Privacy">
                <option value="0">Public</option>
                <option value="1">Private</option>
            </InputSelect>

            <hr />
            <h5>Skills</h5>
            <div class="row">
                <div class="col-md-5">
                    <InputSelect class="form-control mb-2" @bind-Value="newSkill.SkillName">
                        <option disabled selected value="">Select a Skill</option>
                        @foreach (var skill in availableSkills)
                        {
                            <option value="@skill">@skill</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <InputNumber class="form-control mb-2" placeholder="Years of Experience" @bind-Value="newSkill.YearsOfExperience" />
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-outline-primary" @onclick="AddSkill">Add Skill</button>
                </div>
            </div>

            @if (newProfile.Skills.Any())
            {
                <ul class="list-group mb-2">
                    @foreach (var skill in newProfile.Skills)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @skill.SkillName (@skill.YearsOfExperience) years
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveSkill(skill)">Remove</button>
                        </li>
                    }
                </ul>
            }

            <button class="btn btn-success mt-2" type="submit" disabled="@isLoading">
                @(isEditing ? "Save Changes" : "Add Talent")
            </button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<h4 class="mt-4">Public Talent Profiles</h4>

<table class="table table-bordered">
    <thead>
    <tr>
        <th>Name</th>
        <th>Email</th>
        <th>Country</th>
        <th>Price</th>
        <th>Skills</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @if (profiles is null)
    {
        <tr><td colspan="6">Loading...</td></tr>
    }
    else if (!profiles.Any())
    {
        <tr><td colspan="6">No talent profiles found.</td></tr>
    }
    else
    {
        @foreach (var p in profiles)
        {
            <tr>
                <td>@p.ProfileName</td>
                <td>@p.Email</td>
                <td>@p.Country</td>
                <td>@p.Price</td>
                <td>
                    @foreach (var skill in p.Skills)
                    {
                        <span class="badge bg-info text-dark me-1">@skill.SkillName (@skill.YearsOfExperience)</span>
                    }
                </td>
                <td>
                    <button class="btn btn-sm btn-warning me-1" @onclick="@(() => EditProfile(p))">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteProfile(p.ProfileName))">Delete</button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private List<TalentProfileDto>? profiles;
    private TalentProfileDto newProfile = new();
    private SkillDto newSkill = new();
    private List<string> availableSkills = new();
    private bool isLoading = false;
    private bool isEditing = false;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private bool initialized = false;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("/talent-management"))
        {
            await CheckSessionAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true;
            await CheckSessionAsync();
            StateHasChanged();
        }
    }

    private async Task CheckSessionAsync()
    {
        var userIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
        var roleIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
        var username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

        if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
            UserSession.UserId = uid;
        else
            UserSession.UserId = null;

        if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
            UserSession.RoleId = roleId;
        else
            UserSession.RoleId = null;

        UserSession.Username = username;

        if (UserSession.UserId == null)
        {
            NavigationManager.NavigateTo("/Login");
        }
        else
        {
            newProfile.FkUserId = UserSession.UserId.Value;
            await LoadProfiles();
            await LoadAvailableSkills();
        }
    }

    private async Task LoadProfiles()
    {
        try
        {
            isLoading = true;
            profiles = await Http.GetFromJsonAsync<List<TalentProfileDto>>("/talent_profiles/list");
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar perfis: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAvailableSkills()
    {
        try
        {
            var json = await Http.GetStreamAsync("/skills/list");
            var skills = await JsonSerializer.DeserializeAsync<List<string>>(json);

            if (skills is not null)
            {
                availableSkills = skills;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar lista de skills: {ex.Message}";
        }
    }

    private async Task CreateProfile()
    {
        try
        {
            isLoading = true;
            newProfile.FkUserId = UserSession.UserId!.Value;

            var url = $"/talent_profile/add_profile?" +
                      $"profile_name={Uri.EscapeDataString(newProfile.ProfileName)}" +
                      $"&country={Uri.EscapeDataString(newProfile.Country)}" +
                      $"&email={Uri.EscapeDataString(newProfile.Email)}" +
                      $"&price={newProfile.Price}" +
                      $"&privacy={newProfile.Privacy}" +
                      $"&category={Uri.EscapeDataString(newProfile.Category)}" +
                      $"&fk_user_id={newProfile.FkUserId}";

            var response = await Http.PostAsync(url, null);

            if (response.IsSuccessStatusCode)
            {
                foreach (var skill in newProfile.Skills)
                {
                    var skillUrl = $"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_skill?" +
                                   $"skill_name={Uri.EscapeDataString(skill.SkillName)}" +
                                   $"&years_of_experience={skill.YearsOfExperience}";

                    var skillResponse = await Http.PostAsync(skillUrl, null);
                    if (!skillResponse.IsSuccessStatusCode)
                    {
                        errorMessage += $" Erro ao adicionar skill '{skill.SkillName}': {await skillResponse.Content.ReadAsStringAsync()}";
                    }
                }

                successMessage = "Perfil criado com sucesso!";
                await LoadProfiles();
                newProfile = new TalentProfileDto();
                newProfile.FkUserId = UserSession.UserId!.Value;
                newSkill = new SkillDto();
                isEditing = false;
            }
            else
            {
                errorMessage = $"Erro ao criar: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateProfile()
    {
        try
        {
            isLoading = true;
            newProfile.FkUserId = UserSession.UserId!.Value;

            var url = $"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/update?" +
                      $"country={Uri.EscapeDataString(newProfile.Country)}" +
                      $"&email={Uri.EscapeDataString(newProfile.Email)}" +
                      $"&price={newProfile.Price}" +
                      $"&privacy={newProfile.Privacy}" +
                      $"&category={Uri.EscapeDataString(newProfile.Category)}" +
                      $"&fk_user_id={newProfile.FkUserId}";

            var response = await Http.PutAsync(url, null);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Perfil atualizado com sucesso!";
                await LoadProfiles();
                newProfile = new TalentProfileDto();
                newProfile.FkUserId = UserSession.UserId!.Value;
                newSkill = new SkillDto();
                isEditing = false;
            }
            else
            {
                errorMessage = $"Erro ao atualizar: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteProfile(string profileName)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Deseja realmente excluir o perfil '{profileName}'?"))
            return;

        try
        {
            isLoading = true;
            var response = await Http.DeleteAsync($"/talent_profiles/{Uri.EscapeDataString(profileName)}/delete");

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Perfil excluído com sucesso!";
                await LoadProfiles();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditProfile(TalentProfileDto profile)
    {
        newProfile = new TalentProfileDto
        {
            ProfileName = profile.ProfileName,
            Country = profile.Country,
            Email = profile.Email,
            Price = profile.Price,
            Privacy = profile.Privacy,
            Category = profile.Category,
            FkUserId = profile.FkUserId,
            Skills = profile.Skills.Select(s => new SkillDto { SkillName = s.SkillName, YearsOfExperience = s.YearsOfExperience }).ToList()
        };

        isEditing = true;
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private void AddSkill()
    {
        if (!string.IsNullOrEmpty(newSkill.SkillName) && newSkill.YearsOfExperience > 0)
        {
            if (!newProfile.Skills.Any(s => s.SkillName == newSkill.SkillName))
            {
                newProfile.Skills.Add(new SkillDto
                {
                    SkillName = newSkill.SkillName,
                    YearsOfExperience = newSkill.YearsOfExperience
                });

                newSkill = new SkillDto();
            }
        }
    }

    private void RemoveSkill(SkillDto skill)
    {
        newProfile.Skills.Remove(skill);
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
        UserSession.UserId = null;
        UserSession.RoleId = null;
        UserSession.Username = null;
        NavigationManager.NavigateTo("/Login");
    }

    public class TalentProfileDto
    {
        public string ProfileName { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Privacy { get; set; } = 0;
        public string Category { get; set; } = string.Empty;
        public int FkUserId { get; set; }
        public List<SkillDto> Skills { get; set; } = new();
    }

    public class SkillDto
    {
        public string SkillName { get; set; } = string.Empty;
        public int YearsOfExperience { get; set; }
    }

    public static class UserSession
    {
        public static int? UserId { get; set; }
        public static int? RoleId { get; set; }
        public static string? Username { get; set; }
    }
}

<style>
    h3 {
        margin-bottom: 1.5rem;
    }

    .card.mb-4 {
        margin-bottom: 2rem !important;
    }

    .table th {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        color: white;
        text-align: center;
        vertical-align: middle;
    }

    .table td {
        text-align: center;
        vertical-align: middle;
    }

    .btn {
        padding: 0.4rem 0.75rem;
        font-size: 0.9rem;
        border-radius: 5px;
        margin: 0.1rem;
    }

    .btn-sm {
        padding: 0.35rem 0.6rem;
        font-size: 0.8rem;
    }

    .me-1 {
        margin-right: 0.5rem;
    }

    .form-label {
        font-weight: bold;
    }

    .list-group-item button {
        font-size: 0.8rem;
        padding: 0.35rem 0.6rem;
    }
</style>
