@page "/talent-management"
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ApiHelper apiHelper
@using System.ComponentModel.DataAnnotations
@using Frontend.Helpers
@rendermode InteractiveServer

<h3>Gestão de Talentos</h3>

<div class="card mb-4">
    <div class="card-body">
        <h4>Criar Novo Talento</h4>

        <EditForm Model="@newTalent" OnValidSubmit="@CreateTalent" FormName="createTalentForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="profileName">Nome *</label>
                <InputText id="profileName"
                           @bind-Value="newTalent.profile_name"
                           class="form-control"
                           aria-label="Nome completo do talento"
                           aria-required="true"
                           placeholder="Digite o nome completo" />
                <ValidationMessage For="@(() => newTalent.profile_name)" />
            </div>

            <div class="form-group">
                <label for="email">Email *</label>
                <InputText id="email"
                           @bind-Value="newTalent.email"
                           class="form-control"
                           aria-label="Endereço de email"
                           aria-required="true"
                           placeholder="exemplo@email.com"
                           type="email" />
                <ValidationMessage For="@(() => newTalent.email)" />
            </div>

            <div class="form-group">
                <label for="country">País</label>
                <InputText id="country"
                           @bind-Value="newTalent.country"
                           class="form-control"
                           aria-label="País de origem"
                           placeholder="Digite o país" />
            </div>

            <div class="form-group">
                <label for="category">Categoria</label>
                <InputText id="category"
                           @bind-Value="newTalent.category"
                           class="form-control"
                           aria-label="Categoria do talento"
                           placeholder="Digite a categoria" />
            </div>

            <div class="form-group">
                <label for="price">Preço (€)</label>
                <InputNumber id="price"
                             @bind-Value="newTalent.price"
                             class="form-control"
                             aria-label="Valor do serviço"
                             placeholder="0,00" />
            </div>

            <div class="form-group">
                <label for="privacy">Privacidade (0=Público, 1=Privado)</label>
                <InputNumber id="privacy"
                             @bind-Value="newTalent.privacy"
                             class="form-control"
                             aria-label="Nível de privacidade"
                             min="0"
                             max="1"
                             step="1" />
            </div>

            <div class="form-group">
                <label for="fk_user_id">ID do Usuário</label>
                <InputNumber id="fk_user_id"
                             @bind-Value="newTalent.fk_user_id"
                             class="form-control"
                             aria-label="ID do usuário associado" />
            </div>

            <button type="submit" class="btn btn-success mt-3" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Criando...</span>
                }
                else
                {
                    <span class="oi oi-plus"></span> @("Criar Talento")
                }
            </button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3">@successMessage</div>
            }
        </EditForm>
    </div>
</div>

<h4 class="mt-5">Lista de Talentos</h4>

<table class="table table-striped table-hover">
    <thead class="thead-dark">
        <tr>
            <th>Nome</th>
            <th>Email</th>
            <th>País</th>
            <th>Categoria</th>
            <th>Preço</th>
            <th>Privacidade</th>
            <th>ID Usuário</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @if (isLoading && talents == null)
        {
            <tr>
                <td colspan="8" class="text-center text-muted">
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    Carregando...
                </td>
            </tr>
        }
        else if (talents == null || !talents.Any())
        {
            <tr>
                <td colspan="8" class="text-center text-muted">Nenhum talento encontrado</td>
            </tr>
        }
        else
        {
            @foreach (var talent in talents)
            {
                <tr>
                    <td>@talent.profile_name</td>
                    <td>@talent.email</td>
                    <td>@talent.country</td>
                    <td>@talent.category</td>
                    <td>@talent.price.ToString("0.00")</td>
                    <td>@(talent.privacy == 1 ? "Privado" : "Público")</td>
                    <td>@talent.fk_user_id</td>
                    <td>
                        <button @onclick="@(() => EditTalent(talent))" class="btn btn-sm btn-primary mr-2">
                            <span class="oi oi-pencil"></span> Editar
                        </button>
                        <button @onclick="@(() => DeleteTalent(talent.profile_id))" class="btn btn-sm btn-danger">
                            <span class="oi oi-trash"></span> Excluir
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<TalentProfile>? talents;
    private TalentProfile newTalent = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTalents();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
            }
            if (!string.IsNullOrEmpty(successMessage))
            {
                await JSRuntime.InvokeVoidAsync("console.log", successMessage);
            }
        }
    }

    private async Task LoadTalents()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await Http.GetAsync("/talent_profiles");

            if (response.IsSuccessStatusCode)
            {
                talents = await response.Content.ReadFromJsonAsync<List<TalentProfile>>();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = $"Erro ao carregar: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateTalent()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var response = await Http.PostAsJsonAsync("/talent_profiles", newTalent);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Talento criado com sucesso!";
                await LoadTalents();
                newTalent = new TalentProfile();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(errorMessage))
                {
                    errorMessage = $"Erro: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task EditTalent(TalentProfile talent)
    {
        newTalent = new TalentProfile
        {
            profile_id = talent.profile_id,
            profile_name = talent.profile_name,
            email = talent.email,
            country = talent.country,
            category = talent.category,
            price = talent.price,
            privacy = talent.privacy,
            fk_user_id = talent.fk_user_id
        };
        successMessage = "Edite os dados acima";
        StateHasChanged();
    }

    private async Task DeleteTalent(int profileId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                           "Tem certeza que deseja excluir este talento?");
            
            if (!confirmed) return;

            isLoading = true;
            StateHasChanged();

            var response = await Http.DeleteAsync($"/talent_profiles/{profileId}");

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Talento excluído com sucesso!";
                await LoadTalents();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(errorMessage))
                {
                    errorMessage = $"Erro ao excluir: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class TalentProfile
    {
        public int profile_id { get; set; }

        [Required(ErrorMessage = "Nome é obrigatório")]
        public string profile_name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email é obrigatório")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string email { get; set; } = string.Empty;

        public string? country { get; set; }
        public string? category { get; set; }
        public float price { get; set; }
        public float privacy { get; set; }
        public int fk_user_id { get; set; }
        public int user_id { get; set; }
    }
}