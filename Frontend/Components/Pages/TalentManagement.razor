@page "/talent-management"

@using System.ComponentModel.DataAnnotations
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h2>Talent Management</h2>

@if (UserSession.RoleId != 3)
{
    <div class="card mb-4">
        <div class="card-body">
            <h4>@(isEditing ? "Edit Talent Profile" : "Create New Talent")</h4>
            <EditForm Model="@newProfile" OnValidSubmit="@(isEditing ? UpdateProfile : CreateProfile)">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="row">
                    <!-- Profile details -->
                    <div class="mb4">
                        <InputText class="form-control mb-2" placeholder="Talent Name *" @bind-Value="newProfile.ProfileName"/>
                        <InputText class="form-control mb-2" placeholder="Country *" @bind-Value="newProfile.Country"/>
                        <InputText class="form-control mb-2" placeholder="Email *" @bind-Value="newProfile.Email"/>
                        <label class="form-label">Price (in EUR) *</label>
                        <InputNumber class="form-control mb-2" placeholder="Price *" @bind-Value="newProfile.Price"/>
                        <InputText class="form-control mb-2" placeholder="Category" @bind-Value="newProfile.Category"/>

                        <InputSelect class="form-control mb-2" @bind-Value="newProfile.Privacy">
                            <option value="0">Public</option>
                            <option value="1">Private</option>
                        </InputSelect>
                    </div>

                    <hr class="separator" />
                    
                    <!-- Skills -->
                    <h4>Skills</h4>
                    <div class="row align-items-start">
                        <div class="col-6">
                            <label class="form-label">Skill</label>
                            <InputSelect class="form-control mb-2" @bind-Value="newSkill.SkillName">
                                <option disabled selected value="">Select a Skill</option>
                                @foreach (var skill in availableSkills)
                                {
                                    <option value="@skill">@skill</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-3">
                            <label class="form-label">Years of Experience</label>
                            <InputNumber class="form-control mb-2" placeholder="Years of Experience" @bind-Value="newSkill.YearsOfExperience"/>
                        </div>
                        <div class="col-3">
                            <label class="form-label invisible">Add Skill</label>
                            <button type="button" class="btn btn-primary w-100" @onclick="AddSkill">Add Skill</button>
                        </div>
                    </div>
                    @if (newProfile.Skills.Any())
                    {
                        <ul class="list-group mb-3">
                            @foreach (var s in newProfile.Skills)
                            {
                                <li class="list-group-item d-flex justify-content-between item">
                                    @s.SkillName (@s.YearsOfExperience) years
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveSkill(s)">Remove</button>
                                </li>
                            }
                        </ul>
                    }

                    <hr class="separator" />
                    
                    <!-- Experiences -->
                    <h4>Experiences</h4>
                    <div class="row">
                        <div class="col-md-9">
                            <label class="form-label">Company</label>
                            <InputText class="form-control mb-2" placeholder="Company" @bind-Value="newExperience.CompanyName"/>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button type="button" class="btn btn-primary w-100" @onclick="AddExperience">Add Experience</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">Start Year</label>
                            <InputNumber class="form-control mb-2" placeholder="Starting Year" @bind-Value="newExperience.StartYear" aria-label="Start year of the experience (ex: 2020)"/>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">End Year</label>
                            <InputNumber class="form-control mb-2" placeholder="End Year" @bind-Value="newExperience.EndYear" aria-label="End year of the experience (ex: 2022)"/>
                        </div>
                    </div>
                    @if (newProfile.Experiences.Any())
                    {
                        <ul class="list-group mb-2">
                            @foreach (var e in newProfile.Experiences)
                            {
                                <li class="list-group-item d-flex justify-content-between item">
                                    @e.CompanyName (@e.StartYear - @e.EndYear)
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveExperience(e)">Remove</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="d-flex justify-content-center mt-3">
                    <button class="btn btn-success mt-2 butsav" type="submit" disabled="@isLoading">
                        @(isEditing ? "Save Changes" : "Add Talent")
                    </button>
                    @if (isEditing)
                    {
                        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<h4 class="mt-4">Public Talent Profiles</h4>
<h5 class="mt-4">Search for Skills</h5>
<div class="row mb-3">
    <div class="col-md-6">
        <InputSelect class="form-control" @bind-Value="selectedSkillToSearch">
            <option disabled value="">Select a Skill</option>
            @foreach (var skill in availableSkills)
            {
                <option value="@skill">@skill</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-3">
        <button class="btn btn-primary w-100" @onclick="AddSkillToSearch"
                disabled="@string.IsNullOrEmpty(selectedSkillToSearch)">
            Add Skill
        </button>
    </div>
    <div class="col-md-3">
        <button class="btn btn-success w-100" @onclick="SearchBySkills"
                disabled="@(!searchSkills.Any())">
            Search
        </button>
    </div>
</div>

@if (searchSkills.Any())
{
    <div class="mb-3">
        <h6>Selected Skills:</h6>
        @foreach (var skill in searchSkills)
        {
            <span class="badge bg-primary me-2">
                @skill
                <button class="btn-close btn-close-white btn-sm ms-1" @onclick="() => RemoveSkillFromSearch(skill)"></button>
            </span>
        }
    </div>
}

@if (isLoadingSearch)
{
    <div class="text-center mt-2">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Name</th><th>Email</th><th>Country</th><th>Price</th><th>Skills</th><th>Experiences</th> @if (UserSession.RoleId != 3)
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (profiles == null)
            {
                <tr><td colspan="7">Loading...</td></tr>
            }
            else if (!profiles.Any())
            {
                <tr><td colspan="6">No talent profiles found.</td></tr>
            }
            else
            {
                @foreach (var p in profiles)
                {
                    <tr>
                        <td>@p.ProfileName</td>
                        <td>@p.Email</td>
                        <td>@p.Country</td>
                        <td>@p.Price</td>
                        <td>
                            @foreach (var s in p.Skills)
                            {
                                <span class="badge bg-info text-dark me-1">@s.SkillName (@s.YearsOfExperience)</span>
                            }
                        </td>
                        <td>
                            @foreach (var e in p.Experiences)
                            {
                                <span class="badge bg-secondary me-1">
                                    @e.CompanyName [@e.StartYear - @(e.EndYear == 0 ? "" : e.EndYear.ToString())]
                                </span>
                            }
                        </td>
                        <td>
                            @if (
                                UserSession.RoleId == 1 || 
                                (UserSession.RoleId == 2 && (
                                    p.Privacy == 0 || 
                                    (p.Privacy == 1 && p.FkUserId == UserSession.UserId) 
                                ))
                            )
                            {
                                <button class="btn btn-sm btn-warning me-1" @onclick="@(() => EditProfile(p))">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteProfile(p.ProfileName))">Delete</button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<TalentProfileDto>? profiles;
    private TalentProfileDto newProfile = new() { FkUserId = UserSession.UserId ?? 0 };
    private TalentProfileDto originalProfile = new();
    private SkillDto newSkill = new();
    private ExperienceDto newExperience = new();
    private List<string> availableSkills = new();
    private bool isLoading;
    private bool isEditing;
    private string successMessage = "";
    private string errorMessage = "";
    private bool initialized;
    private string selectedSkillToSearch = "";
    private List<string> searchSkills = new();
    private bool isLoadingSearch;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += async (s, e) =>
        {
            if (e.Location.EndsWith("/talent-management"))
            {
                await CheckSessionAsync(); StateHasChanged();
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true; await CheckSessionAsync(); StateHasChanged();
        }
    }

    private async Task CheckSessionAsync()
    {
        var uid = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
        var rid = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
        UserSession.UserId = int.TryParse(uid, out var u) ? u : null;
        UserSession.RoleId = int.TryParse(rid, out var r) ? r : null;
        UserSession.Username = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");
        if (UserSession.UserId == null) { NavigationManager.NavigateTo("/login"); return; }
        newProfile.FkUserId = UserSession.UserId.Value;
        await LoadProfiles(); await LoadAvailableSkills();
    }

    private async Task LoadProfiles()
    {
        try
        {
            isLoading = true;
            var allProfiles = await Http.GetFromJsonAsync<List<TalentProfileDto>>("/talent_profiles/list");


            List<TalentProfileDto> filteredProfiles;

            if (UserSession.RoleId == 1) // admin
            {
                filteredProfiles = allProfiles;
            }
            else if (UserSession.RoleId == 2) // usermanager
            {
                filteredProfiles = allProfiles
                    .Where(p => p.Privacy == 0 || p.FkUserId == UserSession.UserId)
                    .ToList();
            }
            else // user
            {

                filteredProfiles = allProfiles
                    .Where(p => p.Privacy == 0)
                    .ToList();
            }

            // Ordenar os perfis alfabeticamente pelo nome
            profiles = filteredProfiles.OrderBy(p => p.ProfileName).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading talents: {ex.Message}";

        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadAvailableSkills()
    {
        try { var js = await Http.GetStreamAsync("/skills/list"); var sk = await JsonSerializer.DeserializeAsync<List<string>>(js); if (sk!=null) availableSkills=sk; }
        catch (Exception ex) { errorMessage=$"Error loading skills: {ex.Message}"; }
    }

    private async Task CreateProfile()
    {
        isLoading=true;
        try
        {
            var url=$"/talent_profile/add_profile?profile_name={Uri.EscapeDataString(newProfile.ProfileName)}"+
                    $"&country={Uri.EscapeDataString(newProfile.Country)}"+
                    $"&email={Uri.EscapeDataString(newProfile.Email)}"+
                    $"&price={newProfile.Price}"+
                    $"&privacy={newProfile.Privacy}"+
                    $"&category={Uri.EscapeDataString(newProfile.Category)}"+
                    $"&fk_user_id={newProfile.FkUserId}";
            var r=await Http.PostAsync(url,null); r.EnsureSuccessStatusCode();
            foreach(var s in newProfile.Skills)
                await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_skill?skill_name={Uri.EscapeDataString(s.SkillName)}&years_of_experience={s.YearsOfExperience}",null);
            foreach(var e in newProfile.Experiences)
                await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_experience?company_name={Uri.EscapeDataString(e.CompanyName)}&start_year={e.StartYear}&end_year={e.EndYear}",null);
            successMessage="Talente create successfully!"; await LoadProfiles(); ResetForm();
        }
        catch(Exception ex){errorMessage=ex.Message;}finally{isLoading=false;}
    }

    private async Task UpdateProfile()
    {
        isLoading=true;
        try
        {
            var url=$"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/update?country={Uri.EscapeDataString(newProfile.Country)}&email={Uri.EscapeDataString(newProfile.Email)}&price={newProfile.Price}&privacy={newProfile.Privacy}&category={Uri.EscapeDataString(newProfile.Category)}&fk_user_id={newProfile.FkUserId}";
            var rp=await Http.PutAsync(url,null); rp.EnsureSuccessStatusCode();
            var remS=originalProfile.Skills.Where(o=>!newProfile.Skills.Any(n=>n.SkillName==o.SkillName));
            foreach(var s in remS) await Http.DeleteAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/remove_skill?skill_name={Uri.EscapeDataString(s.SkillName)}");
            var addS=newProfile.Skills.Where(n=>!originalProfile.Skills.Any(o=>o.SkillName==n.SkillName));
            foreach(var s in addS) await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_skill?skill_name={Uri.EscapeDataString(s.SkillName)}&years_of_experience={s.YearsOfExperience}",null);
            var remE=originalProfile.Experiences.Where(o=>!newProfile.Experiences.Any(n=>n.ExperienceId==o.ExperienceId));
            foreach(var e in remE) await Http.DeleteAsync($"/experiences/{e.ExperienceId}");
            var updE=newProfile.Experiences.Where(n=>originalProfile.Experiences.Any(o=>o.ExperienceId==n.ExperienceId));
            foreach(var e in updE) await Http.PutAsync($"/experiences/{e.ExperienceId}?company_name={Uri.EscapeDataString(e.CompanyName)}&start_year={e.StartYear}&end_year={e.EndYear}",null);
            var addE=newProfile.Experiences.Where(n=>n.ExperienceId==0);
            foreach(var e in addE) await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_experience?company_name={Uri.EscapeDataString(e.CompanyName)}&start_year={e.StartYear}&end_year={e.EndYear}",null);
            successMessage="Talent updated successfully!"; await LoadProfiles(); ResetForm();
        }
        catch(Exception ex){errorMessage=ex.Message;}finally{isLoading=false;}
    }

    private async Task DeleteProfile(string pn)
    {
        if(!await JsRuntime.InvokeAsync<bool>("confirm",$"Excluir {pn}?"))return; isLoading=true;
        try{var r=await Http.DeleteAsync($"/talent_profiles/{Uri.EscapeDataString(pn)}/delete"); if(r.IsSuccessStatusCode){successMessage="Talent Removed!";await LoadProfiles();}else errorMessage=await r.Content.ReadAsStringAsync();}
        catch(Exception ex){errorMessage=ex.Message;}finally{isLoading=false;}
    }

    private void EditProfile(TalentProfileDto p)
    {
        originalProfile = p.Clone();
        newProfile = p.Clone();
        isEditing = true;
        successMessage = errorMessage = "";
    }

    private void AddSkill()
    {
        if(!string.IsNullOrEmpty(newSkill.SkillName) && newSkill.YearsOfExperience>0 && !newProfile.Skills.Any(s=>s.SkillName==newSkill.SkillName))
        {
            newProfile.Skills.Add(newSkill.Clone());
            newSkill=new SkillDto();
        }
    }
    private void RemoveSkill(SkillDto s) => newProfile.Skills.Remove(s);

    private async Task AddExperience()
    {
        errorMessage = "";

        bool isEndYearValid = !newExperience.EndYear.HasValue || (newExperience.EndYear.Value > 0);

        if (!string.IsNullOrWhiteSpace(newExperience.CompanyName) &&
            newExperience.StartYear > 0 &&
            isEndYearValid &&
            (!newExperience.EndYear.HasValue || newExperience.StartYear < newExperience.EndYear.Value))
        {
            try
            {
                string url = $"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_experience" +
                             $"?company_name={Uri.EscapeDataString(newExperience.CompanyName)}" +
                             $"&start_year={newExperience.StartYear}";

                if (newExperience.EndYear.HasValue)
                    url += $"&end_year={newExperience.EndYear.Value}";

                var response = await Http.PostAsync(url, null);

                if (response.IsSuccessStatusCode)
                {
                    newProfile.Experiences.Add(newExperience.Clone());
                    newExperience = new ExperienceDto();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Error: {errorContent}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Unexpected error: {ex.Message}";
            }
        }
        else
        {

            errorMessage = "Please fill out the data correctly: company name, valid years, and start value lower then end value (if filled out).";

        }
    }
    private void RemoveExperience(ExperienceDto e) => newProfile.Experiences.Remove(e);

    private void CancelEdit() => ResetForm();

    private void ResetForm()
    {
        newProfile = new TalentProfileDto { FkUserId = UserSession.UserId!.Value };
        originalProfile = new TalentProfileDto();
        newSkill = new SkillDto(); newExperience = new ExperienceDto(); isEditing=false;
    }
    
    private async Task SearchBySkills()
    {
        if (!searchSkills.Any())
        {
            errorMessage = "Select at least one skills to begin search";
            return;
        }

        try
        {
            isLoadingSearch = true;
            errorMessage = "";
            successMessage = "";
            StateHasChanged();

            // Versão com GET
            var query = string.Join(",", searchSkills.Select(Uri.EscapeDataString));
            var response = await Http.GetAsync($"/talent_profiles/search_by_skills?skill_names={query}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<TalentProfileDto>>();
                profiles = result?.OrderBy(p => p.ProfileName).ToList();
            
                if (profiles?.Count == 0)
                {
                    successMessage = "No talents found with the selected skills";
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(errorMessage))
                {
                    errorMessage = $"Error while searching: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error while searching: {ex.Message}";
            Console.WriteLine($"Detailed error: {ex}");
        }
        finally
        {
            isLoadingSearch = false;
            StateHasChanged(); 
        }
    }

    private void AddSkillToSearch()
    {
        if (!string.IsNullOrEmpty(selectedSkillToSearch) &&
            !searchSkills.Contains(selectedSkillToSearch))
        {
            searchSkills.Add(selectedSkillToSearch);
            selectedSkillToSearch = "";
            errorMessage = "";
            StateHasChanged();
        }
        else if (searchSkills.Contains(selectedSkillToSearch))
        {
            errorMessage = "This skill has been added already.";
        }
    }

    private void RemoveSkillFromSearch(string skill)
    {
        searchSkills.Remove(skill);
        StateHasChanged();
    }

    public class TalentProfileDto
    {

        [Required(ErrorMessage = "The name is mandatory.")]

        public string ProfileName { get; set; } = "";

        public string Country { get; set; } = "";
        public string Email { get; set; } = "";
        [Range(0.01, double.MaxValue, ErrorMessage = "The price must be greater than 0.")]
        public double Price { get; set; }
        public string Category { get; set; } = "";
        public int Privacy { get; set; }
        public int FkUserId { get; set; }

        public List<SkillDto> Skills { get; set; } = new();
        public List<ExperienceDto> Experiences { get; set; } = new();

        public TalentProfileDto Clone() => new TalentProfileDto
        {
            ProfileName = ProfileName,
            Country = Country,
            Email = Email,
            Price = Price,
            Privacy = Privacy,
            Category = Category,
            FkUserId = FkUserId,
            Skills = Skills.Select(s => s.Clone()).ToList(),
            Experiences = Experiences.Select(e => e.Clone()).ToList()
        };
    }

    public class SkillDto
    {
        public string SkillName { get; set; } = "";
        public int YearsOfExperience { get; set; }

        public SkillDto Clone() => new SkillDto
        {
            SkillName = this.SkillName,
            YearsOfExperience = this.YearsOfExperience
        };
    }

    
    public class ExperienceDto
    {
        public string CompanyName { get; set; } = "";
        public int StartYear { get; set; }
        public int? EndYear { get; set; }  
        public int ExperienceId { get; set; }

        public ExperienceDto Clone() => new ExperienceDto
        {
            CompanyName = this.CompanyName,
            StartYear = this.StartYear,
            EndYear = this.EndYear,
            ExperienceId = this.ExperienceId
        };
    }
    
    public static class UserSession{public static int? UserId;public static int? RoleId;public static string? Username;}
}

<style>
    h3 {
        margin-bottom: 1.5rem;
    }

    .separator {
        margin: 2rem 0;
        border-top: 2px solid #ccc;
    }

    .card.mb-4 {
        margin-bottom: 2rem !important;
    }

    .item {
        max-width: 600px;
        border: 1px solid #053167;
        border-radius: 6px;
        padding: 10px;
        margin: 8px;
    }
    
    .butsav {
        width: 150px;
    }

    .table th {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        color: white;
        text-align: center;
        vertical-align: middle;
    }

    .table td {
        text-align: center;
        vertical-align: middle;
    }

    .btn {
        padding: 0.4rem 0.75rem;
        font-size: 0.9rem;
        border-radius: 5px;
        margin: 0.1rem;
    }

    .btn-primary {
        background-color: #053167;
        border-color: #053167;
    }

    .btn-primary:hover {
        background-color: #042750;
        border-color: #042750;
    }

    .btn-sm {
        padding: 0.35rem 0.6rem;
        font-size: 0.8rem;
    }

    .me-1 {
        margin-right: 0.5rem;
    }

    .form-label {
        font-weight: bold;
    }

    .list-group-item button {
        font-size: 0.8rem;
        padding: 0.35rem 0.6rem;
    }
</style>
