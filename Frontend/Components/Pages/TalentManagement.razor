
@page "/talent-management"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Frontend.Helpers
@rendermode InteractiveServer

<h3 class="mt-3">Gestão de Talentos</h3>

@if (!string.IsNullOrEmpty(UserSession.Username))
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <p class="mb-0">Bem-vindo, <strong>@UserSession.Username</strong>!</p>
        <button class="btn btn-outline-danger" @onclick="Logout">
            <span class="oi oi-account-logout"></span> Sair
        </button>
    </div>
}
@if (UserSession.RoleId != 3)
{
    <div class="card mb-4">
    <div class="card-body">
        <h4>@(isEditing ? "Editar Perfil" : "Criar Novo Perfil")</h4>
        <EditForm Model="@newProfile" OnValidSubmit="@(isEditing ? UpdateProfile : CreateProfile)">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <!-- Profile details -->
                <div class="col-md-6">
                    <InputText class="form-control mb-2" placeholder="Nome do Perfil *" @bind-Value="newProfile.ProfileName" />
                    <InputText class="form-control mb-2" placeholder="País *" @bind-Value="newProfile.Country" />
                    <InputText class="form-control mb-2" placeholder="Email *" @bind-Value="newProfile.Email" />
                    <label class="form-label">Preço (em EUR) *</label>
                    <InputNumber class="form-control mb-2" placeholder="Preço em EUR" @bind-Value="newProfile.Price" aria-label="Preço em euros" />
                    <InputText class="form-control mb-2" placeholder="Categoria" @bind-Value="newProfile.Category" />
                    <InputSelect class="form-control mb-2" @bind-Value="newProfile.Privacy">
                        <option value="0">Público</option>
                        <option value="1">Privado</option>
                    </InputSelect>
                </div>

                <!-- Skills & Experiences -->
                <div class="col-md-6">
                    <h5>Skills</h5>
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label invisible">Adicionar</label>
                            <InputSelect class="form-control mb-2" @bind-Value="newSkill.SkillName">
                                <option disabled value="">Selecione uma Skill</option>
                                @foreach (var skill in availableSkills)
                                {
                                    <option value="@skill">@skill</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-3">
                            <label class="form-label">Anos de Experiencia</label>
                            <InputNumber class="form-control mb-2" placeholder="Anos de Experiência" @bind-Value="newSkill.YearsOfExperience"/>
                        </div>
                        <div class="col-3 d-flex align-items-center">
                            <button type="button" class="btn btn-outline-primary w-100" @onclick="AddSkill">Adicionar Skill</button>
                        </div>
                    </div>
                    @if (newProfile.Skills.Any())
                    {
                        <ul class="list-group mb-3">
                            @foreach (var s in newProfile.Skills)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    @s.SkillName (@s.YearsOfExperience) anos
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveSkill(s)">Remover</button>
                                </li>
                            }
                        </ul>
                    }
                    
                    <label class="form-label invisible">Adicionar</label>
                    <h5>Experiências</h5>
                    <div class="row">
                        <div class="col-6">
                            <InputText class="form-control mb-2" placeholder="Empresa" @bind-Value="newExperience.CompanyName"/>
                        </div>
                        <div class="col-3">
                            <label class="form-label">Ano de Início </label>
                            <InputNumber class="form-control mb-2" placeholder="Ano Início" @bind-Value="newExperience.StartYear" aria-label="Ano de início da experiência (ex: 2020)" />
                        </div>
                        <div class="col-3">
                            <label class="form-label">Ano de Fim </label>
                            <InputNumber class="form-control mb-2" placeholder="Ano Fim" @bind-Value="newExperience.EndYear" aria-label="Ano de fim da experiência (ex: 2022)" />
                        </div>
                        <div class="col-12 d-flex justify-content-end">
                            <button type="button" class="btn btn-outline-primary" @onclick="AddExperience">Adicionar Experiência</button>
                        </div>
                    </div>
                    @if (newProfile.Experiences.Any())
                    {
                        <ul class="list-group mb-2">
                            @foreach (var e in newProfile.Experiences)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    @e.CompanyName (@e.StartYear - @e.EndYear)
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveExperience(e)">Remover</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <div class="d-flex justify-content-end mt-3">
                <button class="btn btn-success px-4" type="submit" disabled="@isLoading">
                    @(isEditing ? "Guardar Alterações" : "Criar Perfil")
                </button>
                @if (isEditing)
                {
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancelar</button>
                }
            </div>
        </EditForm>
    </div>
</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<h4 class="mt-4">Talentos</h4>
<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Nome</th><th>Email</th><th>País</th><th>Preço</th><th>Skills</th><th>Experiências</th> @if (UserSession.RoleId != 3) // Apenas Admin e UserManager veem esta coluna
                {
                    <th>Ações</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (profiles == null)
            {
                <tr><td colspan="7">Carregando...</td></tr>
            }
            else if (!profiles.Any())
            {
                <tr><td colspan="7">Nenhum perfil encontrado.</td></tr>
            }
            else
            {
                @foreach (var p in profiles)
                {
                    <tr>
                        <td>@p.ProfileName</td>
                        <td>@p.Email</td>
                        <td>@p.Country</td>
                        <td>@p.Price</td>
                        <td>
                            @foreach (var s in p.Skills)
                            {
                                <span class="badge bg-info text-dark me-1">@s.SkillName (@s.YearsOfExperience)</span>
                            }
                        </td>
                        <td>
                            @foreach (var e in p.Experiences)
                            {
                                <span class="badge bg-secondary me-1">@e.CompanyName [@e.StartYear - @e.EndYear]</span>
                            }
                        </td>
                        <td>
                            @if (
                                UserSession.RoleId == 1 || // Admin pode tudo
                                (UserSession.RoleId == 2 && (
                                    p.Privacy == 0 || // UserManager pode editar/remover todos os públicos
                                    (p.Privacy == 1 && p.FkUserId == UserSession.UserId) // ...e os privados que ele criou
                                ))
                            )
                            {
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => EditProfile(p)">Editar</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteProfile(p.ProfileName)">Excluir</button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<TalentProfileDto>? profiles;
    private TalentProfileDto newProfile = new() { FkUserId = UserSession.UserId ?? 0 };
    private TalentProfileDto originalProfile = new();
    private SkillDto newSkill = new();
    private ExperienceDto newExperience = new();
    private List<string> availableSkills = new();
    private bool isLoading;
    private bool isEditing;
    private string successMessage = "";
    private string errorMessage = "";
    private bool initialized;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += async (s, e) =>
        {
            if (e.Location.EndsWith("/talent-management"))
            {
                await CheckSessionAsync(); StateHasChanged();
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true; await CheckSessionAsync(); StateHasChanged();
        }
    }

    private async Task CheckSessionAsync()
    {
        var uid = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
        var rid = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
        UserSession.UserId = int.TryParse(uid, out var u) ? u : null;
        UserSession.RoleId = int.TryParse(rid, out var r) ? r : null;
        UserSession.Username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");
        if (UserSession.UserId == null) { NavigationManager.NavigateTo("/Login"); return; }
        newProfile.FkUserId = UserSession.UserId.Value;
        await LoadProfiles(); await LoadAvailableSkills();
    }

    private async Task LoadProfiles()
    {
        try
        {
            isLoading = true;
            var allProfiles = await Http.GetFromJsonAsync<List<TalentProfileDto>>("/talent_profiles/list");

            if (UserSession.RoleId == 1) // admin
            {
                profiles = allProfiles;
            }
            else if (UserSession.RoleId == 2) // usermanager
            {
                profiles = allProfiles
                    .Where(p => p.Privacy == 0 || p.FkUserId == UserSession.UserId)
                    .ToList();
            }
            else // user
            {
                profiles = allProfiles
                    .Where(p => p.Privacy == 0)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar perfis: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task LoadAvailableSkills()
    {
        try { var js = await Http.GetStreamAsync("/skills/list"); var sk = await JsonSerializer.DeserializeAsync<List<string>>(js); if (sk!=null) availableSkills=sk; }
        catch (Exception ex) { errorMessage=$"Erro ao carregar skills: {ex.Message}"; }
    }

    private async Task CreateProfile()
    {
        isLoading=true;
        try
        {
            var url=$"/talent_profile/add_profile?profile_name={Uri.EscapeDataString(newProfile.ProfileName)}"+
                    $"&country={Uri.EscapeDataString(newProfile.Country)}"+
                    $"&email={Uri.EscapeDataString(newProfile.Email)}"+
                    $"&price={newProfile.Price}"+
                    $"&privacy={newProfile.Privacy}"+
                    $"&category={Uri.EscapeDataString(newProfile.Category)}"+
                    $"&fk_user_id={newProfile.FkUserId}";
            var r=await Http.PostAsync(url,null); r.EnsureSuccessStatusCode();
            foreach(var s in newProfile.Skills)
                await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_skill?skill_name={Uri.EscapeDataString(s.SkillName)}&years_of_experience={s.YearsOfExperience}",null);
            foreach(var e in newProfile.Experiences)
                await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_experience?company_name={Uri.EscapeDataString(e.CompanyName)}&start_year={e.StartYear}&end_year={e.EndYear}",null);
            successMessage="Perfil criado com sucesso!"; await LoadProfiles(); ResetForm();
        }
        catch(Exception ex){errorMessage=ex.Message;}finally{isLoading=false;}
    }

    private async Task UpdateProfile()
    {
        isLoading=true;
        try
        {
            // update profile
            var url=$"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/update?country={Uri.EscapeDataString(newProfile.Country)}&email={Uri.EscapeDataString(newProfile.Email)}&price={newProfile.Price}&privacy={newProfile.Privacy}&category={Uri.EscapeDataString(newProfile.Category)}&fk_user_id={newProfile.FkUserId}";
            var rp=await Http.PutAsync(url,null); rp.EnsureSuccessStatusCode();
            // skills diff
            var remS=originalProfile.Skills.Where(o=>!newProfile.Skills.Any(n=>n.SkillName==o.SkillName));
            foreach(var s in remS) await Http.DeleteAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/remove_skill?skill_name={Uri.EscapeDataString(s.SkillName)}");
            var addS=newProfile.Skills.Where(n=>!originalProfile.Skills.Any(o=>o.SkillName==n.SkillName));
            foreach(var s in addS) await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_skill?skill_name={Uri.EscapeDataString(s.SkillName)}&years_of_experience={s.YearsOfExperience}",null);
            // experiences diff
            var remE=originalProfile.Experiences.Where(o=>!newProfile.Experiences.Any(n=>n.ExperienceId==o.ExperienceId));
            foreach(var e in remE) await Http.DeleteAsync($"/experiences/{e.ExperienceId}");
            var updE=newProfile.Experiences.Where(n=>originalProfile.Experiences.Any(o=>o.ExperienceId==n.ExperienceId));
            foreach(var e in updE) await Http.PutAsync($"/experiences/{e.ExperienceId}?company_name={Uri.EscapeDataString(e.CompanyName)}&start_year={e.StartYear}&end_year={e.EndYear}",null);
            var addE=newProfile.Experiences.Where(n=>n.ExperienceId==0);
            foreach(var e in addE) await Http.PostAsync($"/talent_profiles/{Uri.EscapeDataString(newProfile.ProfileName)}/add_experience?company_name={Uri.EscapeDataString(e.CompanyName)}&start_year={e.StartYear}&end_year={e.EndYear}",null);
            successMessage="Perfil atualizado com sucesso!"; await LoadProfiles(); ResetForm();
        }
        catch(Exception ex){errorMessage=ex.Message;}finally{isLoading=false;}
    }

    private async Task DeleteProfile(string pn)
    {
        if(!await JSRuntime.InvokeAsync<bool>("confirm",$"Excluir {pn}?"))return; isLoading=true;
        try{var r=await Http.DeleteAsync($"/talent_profiles/{Uri.EscapeDataString(pn)}/delete"); if(r.IsSuccessStatusCode){successMessage="Perfil excluído!";await LoadProfiles();}else errorMessage=await r.Content.ReadAsStringAsync();}
        catch(Exception ex){errorMessage=ex.Message;}finally{isLoading=false;}
    }

    private void EditProfile(TalentProfileDto p)
    {
        originalProfile = p.Clone();
        newProfile = p.Clone();
        isEditing = true;
        successMessage = errorMessage = "";
    }

    private void AddSkill()
    {
        if(!string.IsNullOrEmpty(newSkill.SkillName) && newSkill.YearsOfExperience>0 && !newProfile.Skills.Any(s=>s.SkillName==newSkill.SkillName))
        {
            newProfile.Skills.Add(newSkill.Clone());
            newSkill=new SkillDto();
        }
    }
    private void RemoveSkill(SkillDto s) => newProfile.Skills.Remove(s);

    private void AddExperience()
    {
        if(newExperience.IsValid()) { newProfile.Experiences.Add(newExperience.Clone()); newExperience=new ExperienceDto(); }
    }
    private void RemoveExperience(ExperienceDto e) => newProfile.Experiences.Remove(e);

    private void CancelEdit() => ResetForm();

    private void ResetForm()
    {
        newProfile = new TalentProfileDto { FkUserId = UserSession.UserId!.Value };
        originalProfile = new TalentProfileDto();
        newSkill = new SkillDto(); newExperience = new ExperienceDto(); isEditing=false;
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
        UserSession.UserId=null;UserSession.RoleId=null;UserSession.Username=null;
        NavigationManager.NavigateTo("/Login");
    }

    public class TalentProfileDto
    {
        [Required(ErrorMessage = "O nome é obrigatório.")]
        public string ProfileName { get; set; } = "";

        [Required(ErrorMessage = "O país é obrigatório.")]
        public string Country { get; set; } = "";

        [Required(ErrorMessage = "O email é obrigatório.")]
        [EmailAddress(ErrorMessage = "Email inválido.")]
        public string Email { get; set; } = "";

        [Range(1, double.MaxValue, ErrorMessage = "O preço deve ser maior do que 0.")]
        public double Price { get; set; }

        public string Category { get; set; } = "";

        public int Privacy { get; set; }

        public int FkUserId { get; set; }

        public List<SkillDto> Skills { get; set; } = new();
        public List<ExperienceDto> Experiences { get; set; } = new();
        public TalentProfileDto Clone()=>new TalentProfileDto{ProfileName=ProfileName,Country=Country,Email=Email,Price=Price,Privacy=Privacy,Category=Category,FkUserId=FkUserId,Skills=Skills.Select(s=>s.Clone()).ToList(),Experiences=Experiences.Select(e=>e.Clone()).ToList()};
    }

    public class SkillDto
    {
        [Required(ErrorMessage = "A skill é obrigatória.")]
        public string SkillName { get; set; } = "";

        [Range(1, 100, ErrorMessage = "Os anos de experiência devem ser maiores do que 0.")]
        public int YearsOfExperience { get; set; }

        public SkillDto Clone() => new SkillDto
        {
            SkillName = this.SkillName,
            YearsOfExperience = this.YearsOfExperience
        };
    }

    
    public class ExperienceDto : IValidatableObject
    {
        public string CompanyName { get; set; } = "";

        [Range(1, 2100, ErrorMessage = "Ano de início inválido.")]
        public int StartYear { get; set; }

        [Range(1, 2100, ErrorMessage = "Ano de fim inválido.")]
        public int EndYear { get; set; }

        public int ExperienceId { get; set; }

        public ExperienceDto Clone() => new ExperienceDto
        {
            CompanyName = this.CompanyName,
            StartYear = this.StartYear,
            EndYear = this.EndYear,
            ExperienceId = this.ExperienceId
        };

        public bool IsValid() => StartYear > 0 && EndYear > 0 && StartYear < EndYear && !string.IsNullOrWhiteSpace(CompanyName);

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (StartYear <= 0 || EndYear <= 0)
            {
                yield return new ValidationResult("Anos de início e fim devem ser maiores que 0.", new[] { nameof(StartYear), nameof(EndYear) });
            }

            if (StartYear >= EndYear)
            {
                yield return new ValidationResult("Ano de início deve ser menor que o ano de fim.", new[] { nameof(StartYear), nameof(EndYear) });
            }
        }
    }
    
    public static class UserSession{public static int? UserId;public static int? RoleId;public static string? Username;}
}

