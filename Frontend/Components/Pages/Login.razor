@page "/login"

@using System.ComponentModel.DataAnnotations
@using Frontend.Helpers

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject LoginEventService LoginEvents

@rendermode InteractiveServer

<div class="login-container">
    <div class="login-card card">
        <h3 class="login-title text-center mb-4">Login</h3>
        <div class="card-body">
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="username">Username</label>
                    <InputText id="username"
                               @bind-Value="loginModel.Username"
                               class="form-control"
                               placeholder="Enter your username" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password"
                               type="password"
                               @bind-Value="loginModel.Password"
                               class="form-control"
                               placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <button type="submit" class="btn btn-primary btn-block mt-3" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <span> Signing in...</span>
                    }
                    else
                    {
                        <span class="oi oi-account-login"></span> <span>Sign In</span>
                    }
                </button>

                <div class="text-center mt-2">
                    <span>Don't have an account yet? </span>
                    <NavLink class="text-decoration-none" href="add-user">Create one here!</NavLink>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-3">@successMessage</div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private bool hasCheckedSession;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasCheckedSession)
        {
            hasCheckedSession = true;

            var userIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
            var username = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");
            var roleIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");

            if (!string.IsNullOrEmpty(userIdStr) && !string.IsNullOrEmpty(roleIdStr))
            {
                if (int.TryParse(userIdStr, out int userId) && int.TryParse(roleIdStr, out int roleId))
                {
                    UserSession.UserId = userId;
                    UserSession.Username = username;
                    UserSession.RoleId = roleId;

                    Navigation.NavigateTo($"/?userId={userId}");
                }
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;
            StateHasChanged();

            var response = await Http.PostAsJsonAsync("/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (userData is not null)
                {
                    // Guardar em sessão estática
                    UserSession.UserId = userData.user_id;
                    UserSession.Username = userData.username;
                    UserSession.RoleId = userData.fk_role_id;

                    // Guardar em sessionStorage do browser para sobreviver ao refresh
                    await JsRuntime.InvokeVoidAsync("sessionStorage.setItem", "userId", userData.user_id.ToString());
                    await JsRuntime.InvokeVoidAsync("sessionStorage.setItem", "username", userData.username);
                    await JsRuntime.InvokeVoidAsync("sessionStorage.setItem", "roleId", userData.fk_role_id.ToString());

                    // Trigger an event HERE!
                    LoginEvents.NotifyLoginStatusChanged();
                    
                    Navigation.NavigateTo($"/?userId={userData.user_id}");
                }
                else
                {
                    errorMessage = "Erro ao processar os dados do utilizador.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Usuário ou senha inválidos.";
            }
            else
            {
                errorMessage = $"Erro no login: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Nome de utilizador é obrigatório")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Senha é obrigatória")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public int user_id { get; set; }
        public string username { get; set; } = string.Empty;
        public int fk_role_id { get; set; }
    }
}

<style>
    body {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
    }
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 2rem;
    }
    .login-card {
        width: 100%;
        max-width: 400px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
        padding: 2rem;
    }
    .login-title {
        font-size: 1.75rem;
        font-weight: 600;
    }
    .btn-block {
        width: 100%;
    }
</style>
