@page "/update-user-info/{UserId:int}"
@using Frontend.Helpers
@using Frontend.Models
@inject HttpClient Http
@inject ApiHelper apiHelper
@inject ApiHelper ApiHelper
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Atualizar User</PageTitle>

@if (!string.IsNullOrEmpty(UserSession.Username))
{
<div style="display: flex; justify-content: space-between; align-items: center;">
    <p style="margin: 0;">Bem-vindo, <strong>@UserSession.Username</strong>!</p>
    <button class="btn btn-outline-danger" @onclick="Logout">
        <span class="oi oi-account-logout"></span> Sair
    </button>
</div>
}

@* Se o utilizador não tiver RoleId = 1, mostramos “Acesso Negado” *@
@if (accessDenied)
{
<div class="alert alert-danger mt-5">
    <h4>Acesso Negado</h4>
    <p>Você não tem permissões suficientes para aceder a esta página.</p>
</div>
}
else
{
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-dark text-white">
                    <h3 class="mb-0">
                        <i class="bi bi-pencil-square me-2"></i>
                        Atualizar Utilizador
                    </h3>
                </div>

                <div class="card-body">
                    @if (loadingUser)
                    {
                    <p class="text-center"><em>Loading...</em></p>
                    }
                    else if (_user == null)
                    {
                    <p class="text-center text-danger"><em>Não foi possível carregar os dados do utilizador.</em></p>
                    }
                    else
                    {
                    <EditForm Model="_user" OnValidSubmit="HandleValidSubmit" FormName="UpdateUserForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="mb-3 text-danger" />

                        @* Username (campo desabilitado) *@
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username"
                                       class="form-control"
                                       @bind-Value="_user.Username"
                                       Disabled="true" />
                        </div>

                        @* Nova Password *@
                        <div class="mb-3">
                            <label for="password" class="form-label">Nova Password</label>
                            <InputText id="password"
                                       type="password"
                                       class="form-control"
                                       @bind-Value="_newPassword"
                                       placeholder="Deixe em branco para manter a password atual" />
                        </div>

                        @* Mensagens de sucesso/erro dentro do card *@
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-1"></i>
                            @_errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                        }
                        else if (!string.IsNullOrEmpty(_successMessage))
                        {
                        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                            <i class="bi bi-check-lg me-1"></i>
                            @_successMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                        }

                        @* Botões de ação alinhados à direita *@
                        <div class="d-flex justify-content-end mt-4">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="bi bi-check-circle-fill me-1"></i>
                                Atualizar
                            </button>
                            <NavLink class="btn btn-outline-secondary" href="user-info">
                                <i class="bi bi-x-circle-fill me-1"></i>
                                Cancelar
                            </NavLink>
                        </div>
                    </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
}
@code {
    [Parameter]
    public int UserId { get; set; }

    private UserUpdateModel? _user;
    private string? _newPassword;
    private string? _errorMessage;
    private string? _successMessage;
    private bool sessionChecked = false;
    private bool accessDenied = false;  // controla autorização
    private bool loadingUser = false;    // indica estado de carregamento

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sessionChecked)
        {
            sessionChecked = true;

            // 1. Carregar sessão a partir do sessionStorage
            if (UserSession.UserId == null)
            {
                var userIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
                var roleIdStr = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
                var username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
                    UserSession.UserId = uid;

                if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
                    UserSession.RoleId = roleId;

                if (!string.IsNullOrEmpty(username))
                    UserSession.Username = username;
            }

            // 2. Se não estiver autenticado, redirecionar para login
            if (UserSession.UserId == null)
            {
                Navigation.NavigateTo("/Login");
            }
            else
            {
                // 3. Só Admin (RoleId == 1) pode continuar; senão, negar acesso
                if (UserSession.RoleId != 1)
                {
                    accessDenied = true;
                    StateHasChanged();
                }
                else
                {
                    // 4. Se autorizado, carregar dados do utilizador
                    await LoadUserData();
                    StateHasChanged();
                }
            }
        }
    }

    private async Task LoadUserData()
    {
        loadingUser = true;
        try
        {
            _user = await ApiHelper.GetFromApiAsync<UserUpdateModel>($"get_user_by_id/{UserId}");
        }
        catch
        {
            _user = null;
        }
        finally
        {
            loadingUser = false;
        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
        UserSession.UserId = null;
        UserSession.Username = string.Empty;
        UserSession.RoleId = null;

        Navigation.NavigateTo("/Login?logout=true", forceLoad: true);
    }

    private async Task HandleValidSubmit()
    {
        _errorMessage = null;
        _successMessage = null;

        try
        {
            if (!string.IsNullOrWhiteSpace(_newPassword) && _user != null)
            {
                _user.Password = _newPassword;
            }

            if (_user != null)
            {
                var result = await ApiHelper.PutToApiAsync<UserUpdateModel, string>($"update_user2/{UserId}", _user);

                if (!string.IsNullOrEmpty(result))
                {
                    _successMessage = result;
                }
                else
                {
                    _errorMessage = "Falha ao atualizar o usuário (resposta vazia).";
                }
            }
        }
        catch (ApiException apiEx)
        {
            _errorMessage = apiEx.Message;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erro inesperado: {ex.Message}";
        }
    }
}