@page "/update-user-info/{UserId:int}"
@using Frontend.Helpers
@using Frontend.Models
@using global::Helpers.Models
@inject ApiHelper ApiHelper
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Update User Info</PageTitle>

@if (_user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="_user" >

        <div class="mb-3">
            <label for="password">Password:</label>
            <InputText id="password" @bind-Value="_user.Password" type="password" class="form-control" />
        </div>

        <div class="form-group">
            <label for="role">Role:</label>
            <InputSelect id="role" class="form-control" @bind-Value="_user.RoleId">
                <option value="1">Admin</option>
                <option value="2">UserManager</option>
                <option value="3">User</option>
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter]
    public int UserId { get; set; }

    private UserUpdateModel? _user;

    protected override async Task OnInitializedAsync()
    {
        // Busca o usuário específico pela API
        _user = await ApiHelper.GetFromApiAsync<UserUpdateModel>($"get_user_by_id/{UserId}");
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("user-info");
    }
    
    }


