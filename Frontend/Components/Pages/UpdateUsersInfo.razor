@page "/update-user-info/{UserId:int}"

@using Frontend.Helpers
@using Frontend.Models

@inject ApiHelper ApiHelper
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<h2>Update User</h2>

@if (accessDenied)
{
<div class="alert alert-danger mt-5">
    <h4>Access Denied</h4>
    <p>You don't have enough permissions to access this page.</p>
</div>
}
else
{
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-sm">
                <div class="card-header text-white">
                    <h3 class="mb-0">
                        <i class="bi bi-pencil-square me-2"></i>
                        Update User
                    </h3>
                </div>

                <div class="card-body">
                    @if (loadingUser)
                    {
                    <p class="text-center"><em>Loading...</em></p>
                    }
                    else if (_user == null)
                    {
                    <p class="text-center text-danger"><em>Failed to load user's data.</em></p>
                    }
                    else
                    {
                    <EditForm Model="_user" OnValidSubmit="HandleValidSubmit" FormName="UpdateUserForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="mb-3 text-danger" />

                        @* Username (campo desabilitado) *@
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username"
                                       class="form-control"
                                       @bind-Value="_user.Username"
                                       Disabled="true" />
                        </div>

                        @* Nova Password *@
                        <div class="mb-3">
                            <label for="password" class="form-label">New Password</label>
                            <InputText id="password"
                                       type="password"
                                       class="form-control"
                                       @bind-Value="_newPassword"
                                       placeholder="Leave unfilled to keep current password" />
                        </div>
                        
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-1"></i>
                            @_errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                        }
                        else if (!string.IsNullOrEmpty(_successMessage))
                        {
                        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                            <i class="bi bi-check-lg me-1"></i>
                            @_successMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                        }

                        <div class="mb-3">
                            <label for="role" class="form-label">Role</label>
                            <InputSelect id="role"
                                         class="form-select"
                                         @bind-Value="_user.RoleId">
                                <option value="1">Admin</option>
                                <option value="2">UserManager</option>
                                <option value="3">User</option>
                            </InputSelect>
                        </div>
                        
                        <div class="d-flex justify-content-end mt-4">
                            <button type="submit" class="btn btn-warning me-2">
                                <i class="bi bi-check-circle-fill me-1"></i>
                                Update
                            </button>
                            <NavLink class="btn btn-secondary" href="user-info">
                                <i class="bi bi-x-circle-fill me-1"></i>
                                Cancel
                            </NavLink>
                        </div>
                    </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
}
@code {
    [Parameter]
    public int UserId { get; set; }

    private UserUpdateModel? _user;
    private string? _newPassword;
    private string? _errorMessage;
    private string? _successMessage;
    private bool sessionChecked;
    private bool accessDenied;  
    private bool loadingUser; 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sessionChecked)
        {
            sessionChecked = true;
            
            if (UserSession.UserId == null)
            {
                var userIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
                var roleIdStr = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "roleId");
                var username = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");

                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var uid))
                    UserSession.UserId = uid;

                if (!string.IsNullOrEmpty(roleIdStr) && int.TryParse(roleIdStr, out var roleId))
                    UserSession.RoleId = roleId;

                if (!string.IsNullOrEmpty(username))
                    UserSession.Username = username;
            }
            
            if (UserSession.UserId == null)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                if (UserSession.RoleId != 1 && UserSession.RoleId != 2)
                {
                    accessDenied = true;
                    StateHasChanged();
                }
                else
                {
                    await LoadUserData();
                    StateHasChanged();
                }
            }
        }
    }

    private async Task LoadUserData()
    {
        loadingUser = true;
        try
        {
            _user = await ApiHelper.GetFromApiAsync<UserUpdateModel>($"get_user_by_id/{UserId}");
            _user = await ApiHelper.GetFromApiAsync<UserUpdateModel>($"get_user_by_id/{UserId}");

        }
        catch
        {
            _user = null;
        }
        finally
        {
            loadingUser = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        _errorMessage = null;
        _successMessage = null;

        try
        {
            if (!string.IsNullOrWhiteSpace(_newPassword) && _user != null)
            {
                _user.Password = _newPassword;
            }

            if (_user != null)
            {
                var result = await ApiHelper.PutToApiAsync<UserUpdateModel, string>($"update_user2/{UserId}", _user);

                if (!string.IsNullOrEmpty(result))
                {
                    _successMessage = result;
                }
                else
                {
                    _errorMessage = "Failed to update user (empty response).";
                }
            }
        }
        catch (ApiException apiEx)
        {
            _errorMessage = apiEx.Message;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}

<style>
    .card-header{
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
    }
</style>