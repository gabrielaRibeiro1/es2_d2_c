@page "/update-user-info/{UserId:int}"
@using Frontend.Helpers
@using Frontend.Models
@using global::Helpers.Models
@inject ApiHelper ApiHelper
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer

<PageTitle>Update User</PageTitle>


<h1>Update User</h1>

@if (_user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="_user" OnValidSubmit="HandleValidSubmit" >

        <div class="mb-3">
            <label for="username">Username</label>
            <InputText id="username" @bind-Value="_user.Username" class="form-control" Disabled="true" />
        </div>

        <div class="mb-3">
            <label for="password">New Password</label>
            <InputText id="password" @bind-Value="_user.Password" type="password" class="form-control" placeholder="Leave blank to keep current" />
        </div>

  

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
        <div class="alert alert-danger">@_errorMessage</div>
        }

        <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">Update</button>
        <NavLink  class="btn btn-secondary ms-2" href="user-info">
            Cancel
        </NavLink>
       
    </EditForm>
}

@code {
    [Parameter]
    public int UserId { get; set; }
    private string? _errorMessage;

    private UserUpdateModel? _user;

    protected override async Task OnInitializedAsync()
    {
        
        _user = await ApiHelper.GetFromApiAsync<UserUpdateModel>($"get_user_by_id/{UserId}");
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            // Usa o método do ApiHelper que faz PUT como JSON
            var success = await ApiHelper.PostToApiAsync("update_user2/" + UserId, _user!);
            if (success)
            {
                NavigationManager.NavigateTo("user-info");
                _errorMessage = "SUCESSO";
            }
            else
            {
                _errorMessage = "Falha ao atualizar o usuário.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
    
    }


